# shellcheck shell=bash

msg_en() {
  local key="${1:-}"
  shift || true
  case "$key" in
    copy_env_file)
      printf 'üìÑ Copy %s' "$1"
      ;;
    command_not_found)
      printf '‚ö†Ô∏è  Command not available: %s; skipping' "$1"
      ;;
    start_dev_port)
      printf 'üöÄ Starting dev command (port %s)' "$1"
      ;;
    start_dev_default)
      printf 'üöÄ Starting dev command'
      ;;
    start_dev_generic)
      printf 'üöÄ Starting dev command'
      ;;
    dev_started_port)
      printf '‚úÖ Dev command running on port %s' "$1"
      ;;
    dev_started_default)
      printf '‚úÖ Dev command running'
      ;;
    dev_failed)
      printf '‚ö†Ô∏è Dev command may not have started correctly (PID: %s); check %s' "$1" "$2"
      ;;
    dev_log_hint)
      printf 'üìù Dev command log: tail -f %s' "$1"
      ;;
    install_skipped_no_command)
      printf '‚öôÔ∏è  Dependencies skipped (no command configured)'
      ;;
    install_detected)
      printf 'üîç Auto-detected install command: %s' "$1"
      ;;
    serve_detected)
      printf 'üîç Auto-detected dev command: %s' "$1"
      ;;
    dev_command)
      printf 'üöÄ Dev command: %s' "$1"
      ;;
    dev_skipped_no_command)
      printf '‚öôÔ∏è  Dev command skipped (no command configured)'
      ;;
    auto_cd_pending)
      printf 'üí° wt auto-cd appears inactive. Try running: %s' "$1"
      ;;
    auto_cd_retry)
      printf '   If that command fails, reopen your terminal.'
      ;;
    auto_cd_disabled)
      printf 'üí° wt auto-cd is not enabled. To jump automatically, run: %s' "$1"
      ;;
    auto_cd_reload)
      printf '   Then reload your shell (e.g. open a new terminal).'
      ;;
    auto_cd_execute)
      printf '   Then run: %s (or reopen the terminal).' "$1"
      ;;
    reserved_port)
      printf '‚ö†Ô∏è  %s is a reserved port (1-1023); the dev command will not use it.' "$1"
      ;;
    port_out_of_range)
      printf '‚ö†Ô∏è  %s is outside the valid port range (65535); falling back to default port.' "$1"
      ;;
    fallback_default_port)
      printf '‚ö†Ô∏è  Using default port 3000 for the dev command.'
      ;;
    creating_worktree)
      printf 'üîß Creating worktree: %s (branch %s)' "$1" "$2"
      ;;
    worktree_created)
      printf '‚úÖ Worktree created'
      ;;
    installing_dependencies)
      printf 'üì¶ Installing dependencies (%s)' "$1"
      ;;
    dev_skipped_config)
      printf '‚öôÔ∏è  Dev command skipped per configuration'
      ;;
    worktree_ready)
      printf '‚úÖ Worktree ready: %s' "$1"
      ;;
    init_set_project)
      printf 'wt init completed successfully.\n\nCaptured defaults:\n  repo.path   ‚Üí \033[1m%s\033[0m\n' "$1"
      ;;
    init_set_branch)
      printf '  repo.branch ‚Üí \033[1m%s\033[0m\n' "$1"
      ;;
    init_done)
      printf ''
      ;;
    aborted)
      printf 'Aborted'
      ;;
    removing_worktree)
      printf 'üóëÔ∏è  Removing worktree: %s' "$1"
      ;;
    removed_branch)
      printf 'üóÇÔ∏è  Deleted branch %s' "$1"
      ;;
    worktree_removed)
      printf '‚úÖ Removed worktree %s' "$1"
      ;;
    current_worktree_removed)
      printf 'üìÅ Current worktree removed; switching back to the main directory'
      ;;
    merge_requires_name)
      printf 'merge requires a worktree name (e.g. wt merge 123)'
      ;;
    merge_main_only)
      printf 'merge only runs on %s (current: %s); checkout the base branch first' "$1" "$2"
      ;;
    merge_base_dirty)
      printf 'main workspace has uncommitted changes; commit or stash before merging'
      ;;
    merge_branch_not_found)
      printf 'feature branch not found: %s' "$1"
      ;;
    merge_feat_dirty)
      printf 'worktree %s has uncommitted changes; commit or stash before merging' "$1"
      ;;
    merge_no_commits)
      printf 'no new commits on %s relative to %s; nothing to merge' "$1" "$2"
      ;;
    merge_start)
      printf 'üîÄ Merging %s into %s' "$1" "$2"
      ;;
    merge_conflict_abort)
      printf '‚ö†Ô∏è Merge conflict; merge manually or enlist an LLM to resolve/conflict-fix/port changes, then rerun'
      ;;
    merge_done)
      printf '‚úÖ Merge complete: %s ‚Üí %s' "$1" "$2"
      ;;
    merge_cleanup_hint)
      printf 'üßπ Consider cleaning up the worktree with: wt rm %s' "$1"
      ;;
    cleaning_worktree)
      printf 'üßπ Cleaning worktree: %s' "$1"
      ;;
    cleaned_count)
      printf '‚úÖ Cleaned %s worktree(s)' "$1"
      ;;
    cleaned_none)
      printf '‚úÖ No numeric worktrees to clean'
      ;;
    clean_switch_back)
      printf 'üìÅ Current worktree was cleaned; switching back to the main directory'
      ;;
    remove_confirm_prompt)
      printf 'Remove worktree %s? [Y/n]' "$1"
      ;;
    config_set_requires)
      printf 'config set requires <key> <value>'
      ;;
    temp_file_failed)
      printf 'failed to allocate temp file'
      ;;
    config_unset_requires)
      printf 'config unset requires <key>'
      ;;
    config_file_missing)
      printf 'config file not found: %s' "$1"
      ;;
    config_key_not_set)
      printf 'config key not set: %s' "$1"
      ;;
    config_update_failed)
      printf 'failed to update config'
      ;;
    git_required)
      printf 'git is required'
      ;;
    project_not_found)
      printf 'project directory not found: %s' "$1"
      ;;
    project_dir_unset)
      printf 'wt is not configured yet; run "wt init" inside your repository first'
      ;;
    list_no_args)
      printf 'list takes no arguments'
      ;;
    main_no_args)
      printf 'main takes no arguments'
      ;;
    path_requires_name)
      printf 'path requires exactly one worktree name'
      ;;
    worktree_not_found)
      printf 'worktree not found: %s' "$1"
      ;;
    add_requires_name)
      printf 'add requires a worktree name'
      ;;
    add_unknown_option)
      printf 'unknown option for add: %s' "$1"
      ;;
    unexpected_extra_argument)
      printf 'unexpected extra argument: %s' "$1"
      ;;
    invalid_worktree_name)
      printf 'invalid worktree name: %s (no /, \\, ~, dot segments, or whitespace)' "$1"
      ;;
    port_requires_numeric)
      printf 'port requires a numeric value between 1024 and 65535'
      ;;
    worktree_exists)
      printf 'worktree path already exists: %s' "$1"
      ;;
    config_list_no_args)
      printf 'config list takes no additional arguments'
      ;;
    config_get_requires_key)
      printf 'config get requires a key'
      ;;
    config_get_requires_exactly_one)
      printf 'config get requires exactly one key'
      ;;
    config_key_not_found)
      printf 'config key not found: %s' "$1"
      ;;
    config_unset_requires_key)
      printf 'config unset requires a key'
      ;;
    config_unset_requires_exactly_one)
      printf 'config unset requires exactly one key'
      ;;
    config_unknown_option)
      printf 'unknown config option: %s' "$1"
      ;;
    config_expect_key_or_value)
      printf 'config expects <key> or <key> <value>'
      ;;
    shell_hook_requires_shell)
      printf 'shell-hook requires a shell (bash or zsh)'
      ;;
    shell_hook_unsupported_shell)
      printf 'unsupported shell for shell-hook: %s (supported: bash, zsh)' "$1"
      ;;
    branch_requires_value)
      printf 'branch requires a value'
      ;;
    init_unknown_option)
      printf 'unknown option for init: %s' "$1"
      ;;
    init_no_positional)
      printf 'init takes no positional arguments'
      ;;
    init_forbid_home)
      printf 'wt init cannot target your home directory (%s)' "$1"
      ;;
    init_run_inside_git)
      printf 'run wt init inside a git repository'
      ;;
    remove_unknown_option)
      printf 'unknown option for remove: %s' "$1"
      ;;
    remove_accepts_at_most_one)
      printf 'remove accepts at most one worktree name'
      ;;
    cannot_remove_main)
      printf 'cannot remove the main worktree'
      ;;
    specify_worktree_or_inside)
      printf 'specify a worktree name or run from inside a worktree'
      ;;
    remove_failed)
      printf 'failed to remove worktree'
      ;;
    clean_no_args)
      printf 'clean takes no arguments'
      ;;
    invalid_language)
      printf 'unsupported language: %s (supported: en, zh)' "$1"
      ;;
    uninstall_auto_detected_shell)
      printf 'Auto-detected shell: %s' "$1"
      ;;
    uninstall_requires_shell_value)
      printf '--shell requires a value'
      ;;
    uninstall_requires_prefix_value)
      printf '--prefix requires a value'
      ;;
    uninstall_invalid_shell)
      printf 'Invalid shell type: %s (use zsh, bash, or none)' "$1"
      ;;
    uninstall_unknown_option)
      printf 'unknown option for uninstall: %s' "$1"
      ;;
    uninstall_no_positional)
      printf 'uninstall takes no positional arguments'
      ;;
    uninstall_removed_binary)
      printf 'Removed wt from %s' "$1"
      ;;
    uninstall_binary_missing)
      printf 'wt not found at %s (already removed?)' "$1"
      ;;
    uninstall_removed_messages)
      printf 'Removed wt messages from %s' "$1"
      ;;
    uninstall_shell_config_missing)
      printf 'Shell config file %s does not exist, skipping.' "$1"
      ;;
    uninstall_shell_hook_missing)
      printf 'No wt shell hook found in %s, skipping.' "$1"
      ;;
    uninstall_backup_created)
      printf 'Created backup: %s.backup.%s' "$1" "$2"
      ;;
    uninstall_shell_hook_removed)
      printf 'Removed wt shell hook from %s' "$1"
      ;;
    uninstall_unknown_shell_type)
      printf 'Warning: Unknown shell type %s, skipping shell cleanup' "$1"
      ;;
    uninstall_skip_shell_cleanup)
      printf 'Skipping shell configuration cleanup (use --shell zsh or --shell bash to clean)'
      ;;
    uninstall_complete)
      printf 'Uninstallation complete.'
      ;;
    uninstall_config_backup_created)
      printf 'Backed up wt config from %s to %s' "$1" "$2"
      ;;
    uninstall_worktrees_preserved)
      printf 'Note: Any existing worktrees were preserved'
      ;;
    update_unknown_option)
      printf 'unknown option for update: %s' "$1"
      ;;
    update_no_positional)
      printf 'update takes no positional arguments'
      ;;
    curl_required)
      printf 'curl is required'
      ;;
    temp_dir_failed)
      printf 'failed to allocate temp directory'
      ;;
    update_fetch)
      printf 'Downloading %s' "$1"
      ;;
    update_download_failed)
      printf 'failed to download %s' "$1"
      ;;
    update_create_prefix_failed)
      printf 'failed to prepare install directory %s' "$1"
      ;;
    update_binary_unchanged)
      printf 'wt already up to date at %s' "$1"
      ;;
    update_binary_installed)
      printf 'Updated wt at %s' "$1"
      ;;
    update_messages_unchanged)
      printf 'messages already up to date at %s' "$1"
      ;;
    update_messages_installed)
      printf 'Updated messages at %s' "$1"
      ;;
    update_install_failed)
      printf 'failed to write %s' "$1"
      ;;
    update_already_latest)
      printf 'You already have the latest wt release'
      ;;
    update_complete)
      printf '‚úÖ Update complete. Restart your shell if wt was running in another session.'
      ;;
    *)
      printf '%s' "$key"
      ;;
  esac
}

msg_zh() {
  local key="${1:-}"
  shift || true
  case "$key" in
    copy_env_file)
      printf 'üìÑ Â§çÂà∂ %s' "$1"
      ;;
    command_not_found)
      printf '‚ö†Ô∏è  Êú™ÊâæÂà∞ÂëΩ‰ª§Ôºö%sÔºåÂ∑≤Ë∑≥Ëøá' "$1"
      ;;
    start_dev_port)
      printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§ÔºàÁ´ØÂè£ %sÔºâ' "$1"
      ;;
    start_dev_default)
      printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
      ;;
    start_dev_generic)
      printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
      ;;
    dev_started_port)
      printf '‚úÖ ÂºÄÂèëÂëΩ‰ª§Â∑≤Âú®Á´ØÂè£ %s ËøêË°å' "$1"
      ;;
    dev_started_default)
      printf '‚úÖ ÂºÄÂèëÂëΩ‰ª§Â∑≤ÂêØÂä®'
      ;;
    dev_failed)
      printf '‚ö†Ô∏è ÂºÄÂèëÂëΩ‰ª§ËøõÁ®ãÂèØËÉΩÊú™Ê≠£Á°ÆÂêØÂä® (PID: %s)ÔºåËØ∑Ê£ÄÊü• %s' "$1" "$2"
      ;;
    dev_log_hint)
      printf 'üìù ÂºÄÂèëÂëΩ‰ª§Êó•ÂøóÔºötail -f %s' "$1"
      ;;
    install_skipped_no_command)
      printf '‚öôÔ∏è  Êú™ÈÖçÁΩÆÂÆâË£ÖÂëΩ‰ª§ÔºåË∑≥Ëøá‰æùËµñÂÆâË£Ö'
      ;;
    install_detected)
      printf 'üîç Ëá™Âä®Ê£ÄÊµãÂà∞ÂÆâË£ÖÂëΩ‰ª§Ôºö%s' "$1"
      ;;
    serve_detected)
      printf 'üîç Ëá™Âä®Ê£ÄÊµãÂà∞ÂºÄÂèëÂëΩ‰ª§Ôºö%s' "$1"
      ;;
    dev_command)
      printf 'üöÄ ÂºÄÂèëÂëΩ‰ª§Ôºö%s' "$1"
      ;;
    dev_skipped_no_command)
      printf '‚öôÔ∏è  Êú™ÈÖçÁΩÆÂºÄÂèëÂëΩ‰ª§ÔºåÂ∑≤Ë∑≥Ëøá'
      ;;
    auto_cd_pending)
      printf 'üí° Ê£ÄÊµãÂà∞ wt Ëá™Âä®ÂàáÊç¢ÁõÆÂΩïÂ∞öÊú™ÁîüÊïà„ÄÇÂ∞ùËØïËøêË°åÔºö%s' "$1"
      ;;
    auto_cd_retry)
      printf '   Â¶ÇÊûúÂëΩ‰ª§Êó†ÊïàÔºåËØ∑ÈáçÊñ∞ÊâìÂºÄ‰∏Ä‰∏™ÁªàÁ´Ø„ÄÇ'
      ;;
    auto_cd_disabled)
      printf 'üí° Ê£ÄÊµãÂà∞ wt Ëá™Âä®ÂàáÊç¢ÁõÆÂΩïÊú™ÂêØÁî®„ÄÇËã•Â∏åÊúõÁõ¥Êé•Ë∑≥ËΩ¨ÔºåÂèØËøêË°åÔºö%s' "$1"
      ;;
    auto_cd_reload)
      printf '   ÁÑ∂ÂêéÈáçÊñ∞Âä†ËΩΩÂΩìÂâç shellÔºà‰æãÂ¶ÇÈáçÊñ∞ÊâìÂºÄ‰∏Ä‰∏™ÁªàÁ´ØÔºâ„ÄÇ'
      ;;
    auto_cd_execute)
      printf '   ÁÑ∂ÂêéÊâßË°åÔºö%sÔºàÊàñÈáçÊñ∞ÊâìÂºÄÁªàÁ´ØÔºâ„ÄÇ' "$1"
      ;;
    reserved_port)
      printf '‚ö†Ô∏è  %s ÊòØ‰øùÁïôÁ´ØÂè£ (1-1023)Ôºå‰∏ç‰ºöÁî®‰∫éÂºÄÂèëÂëΩ‰ª§' "$1"
      ;;
    port_out_of_range)
      printf '‚ö†Ô∏è  %s Ë∂ÖÂá∫ÊúâÊïàÁ´ØÂè£ËåÉÂõ¥ (65535)ÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§Á´ØÂè£' "$1"
      ;;
    fallback_default_port)
      printf '‚ö†Ô∏è  Â∞Ü‰ΩøÁî®ÈªòËÆ§Á´ØÂè£ 3000 ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
      ;;
    creating_worktree)
      printf 'üîß ÂàõÂª∫ worktree: %s (ÂàÜÊîØ %s)' "$1" "$2"
      ;;
    worktree_created)
      printf '‚úÖ worktree ÂàõÂª∫ÂÆåÊàê'
      ;;
    installing_dependencies)
      printf 'üì¶ ÂÆâË£Ö‰æùËµñ (%s)' "$1"
      ;;
    dev_skipped_config)
      printf '‚öôÔ∏è  Ê†πÊçÆÈÖçÁΩÆÂ∑≤Ë∑≥ËøáÂºÄÂèëÂëΩ‰ª§'
      ;;
    worktree_ready)
      printf '‚úÖ Êñ∞ worktree Â∞±Áª™: %s' "$1"
      ;;
    init_set_project)
      printf 'wt init Â∑≤ÂÆåÊàê„ÄÇ\n\nÊçïËé∑ÁöÑÈªòËÆ§ÂÄºÔºö\n  repo.path   ‚Üí \033[1m%s\033[0m\n' "$1"
      ;;
    init_set_branch)
      printf '  repo.branch ‚Üí \033[1m%s\033[0m\n' "$1"
      ;;
    init_done)
      printf ''
      ;;
    aborted)
      printf 'Â∑≤ÂèñÊ∂à'
      ;;
    removing_worktree)
      printf 'üóëÔ∏è  Âà†Èô§ worktree: %s' "$1"
      ;;
    removed_branch)
      printf 'üóÇÔ∏è  Â∑≤Âà†Èô§ÂàÜÊîØ %s' "$1"
      ;;
    worktree_removed)
      printf '‚úÖ Â∑≤ÁßªÈô§ worktree %s' "$1"
      ;;
    current_worktree_removed)
      printf 'üìÅ ÂΩìÂâç worktree Â∑≤ÁßªÈô§ÔºåÂàáÊç¢Âõû‰∏ªÁõÆÂΩï'
      ;;
    merge_requires_name)
      printf 'merge ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞Ôºà‰æãÂ¶Ç wt merge 123Ôºâ'
      ;;
    merge_main_only)
      printf 'merge ‰ªÖÊîØÊåÅÂú® %s ÂàÜÊîØÊâßË°åÔºàÂΩìÂâçÔºö%sÔºâÔºåËØ∑ÂÖàÂàáÊç¢Âà∞Âü∫Á∫øÂàÜÊîØ' "$1" "$2"
      ;;
    merge_base_dirty)
      printf '‰∏ª‰ªìÂ≠òÂú®Êú™Êèê‰∫§‰øÆÊîπÔºåÂêàÂπ∂ÂâçËØ∑Êèê‰∫§ÊàñÊöÇÂ≠ò'
      ;;
    merge_branch_not_found)
      printf 'Êú™ÊâæÂà∞ÁâπÊÄßÂàÜÊîØÔºö%s' "$1"
      ;;
    merge_feat_dirty)
      printf 'worktree %s Â≠òÂú®Êú™Êèê‰∫§‰øÆÊîπÔºåÂêàÂπ∂ÂâçËØ∑Êèê‰∫§ÊàñÊöÇÂ≠ò' "$1"
      ;;
    merge_no_commits)
      printf '%s Áõ∏ÂØπ‰∫é %s Ê≤°ÊúâÊñ∞ÁöÑÊèê‰∫§ÔºåÂ∑≤Ë∑≥ËøáÂêàÂπ∂' "$1" "$2"
      ;;
    merge_start)
      printf 'üîÄ Ê≠£Âú®Â∞Ü %s ÂêàÂπ∂Âà∞ %s' "$1" "$2"
      ;;
    merge_conflict_abort)
      printf '‚ö†Ô∏è ÂêàÂπ∂ÂÜ≤Á™ÅÔºåËØ∑ÊâãÂä®ÂêàÂπ∂ÂêéËá™Ë°å/‰ΩøÁî®LLMËß£ÂÜ≥ÂÜ≤Á™Å/‰ΩøÁî®LLMÁßªÊ§çÂèòÊõ¥„ÄÇ'
      ;;
    merge_done)
      printf '‚úÖ ÂêàÂπ∂ÂÆåÊàê: %s ‚Üí %s' "$1" "$2"
      ;;
    merge_cleanup_hint)
      printf 'üßπ Â¶ÇÈúÄÊ∏ÖÁêÜËØ∑ËøêË°åÔºöwt rm %s' "$1"
      ;;
    cleaning_worktree)
      printf 'üßπ Ê∏ÖÁêÜ worktree: %s' "$1"
      ;;
    cleaned_count)
      printf '‚úÖ Â∑≤Ê∏ÖÁêÜ %s ‰∏™ worktree' "$1"
      ;;
    cleaned_none)
      printf '‚úÖ Ê≤°ÊúâÁ¨¶ÂêàÊù°‰ª∂ÁöÑÊï∞Â≠ó worktree'
      ;;
    clean_switch_back)
      printf 'üìÅ ÂΩìÂâç worktree Â∑≤Ê∏ÖÁêÜÔºåÂàáÊç¢Âõû‰∏ªÁõÆÂΩï'
      ;;
    remove_confirm_prompt)
      printf 'Âà†Èô§ worktree %sÔºü[Y/n]' "$1"
      ;;
    config_set_requires)
      printf 'config set ÈúÄË¶Å <key> <value>'
      ;;
    temp_file_failed)
      printf 'Êó†Ê≥ïÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂'
      ;;
    config_unset_requires)
      printf 'config unset ÈúÄË¶Å <key>'
      ;;
    config_file_missing)
      printf 'Êú™ÊâæÂà∞ÈÖçÁΩÆÊñá‰ª∂: %s' "$1"
      ;;
    config_key_not_set)
      printf 'ÈÖçÁΩÆÈ°πÊú™ËÆæÁΩÆ: %s' "$1"
      ;;
    config_update_failed)
      printf 'Êõ¥Êñ∞ÈÖçÁΩÆÂ§±Ë¥•'
      ;;
    git_required)
      printf 'ÈúÄË¶ÅÂÆâË£Ö git'
      ;;
    project_not_found)
      printf 'Êú™ÊâæÂà∞È°πÁõÆÁõÆÂΩï: %s' "$1"
      ;;
    project_dir_unset)
      printf 'wt Â∞öÊú™ÂàùÂßãÂåñÔºåËØ∑Âú®‰ªìÂ∫ìÁõÆÂΩï‰∏ãËøêË°å wt init'
      ;;
    list_no_args)
      printf 'list ‰∏çÊé•ÂèóÂèÇÊï∞'
      ;;
    main_no_args)
      printf 'main ‰∏çÊé•ÂèóÂèÇÊï∞'
      ;;
    path_requires_name)
      printf 'path ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞'
      ;;
    worktree_not_found)
      printf 'Êú™ÊâæÂà∞ worktree: %s' "$1"
      ;;
    add_requires_name)
      printf 'add ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞'
      ;;
    add_unknown_option)
      printf 'add ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
      ;;
    unexpected_extra_argument)
      printf 'Âá∫Áé∞Êú™È¢ÑÊúüÁöÑÈ¢ùÂ§ñÂèÇÊï∞: %s' "$1"
      ;;
    invalid_worktree_name)
      printf 'ÈùûÊ≥ïÁöÑ worktree ÂêçÁß∞Ôºö%sÔºàÁ¶ÅÊ≠¢ÂåÖÂê´ /„ÄÅ\\„ÄÅ~„ÄÅË∑ØÂæÑÁÇπÊÆµÊàñÁ©∫ÁôΩÔºâ' "$1"
      ;;
    port_requires_numeric)
      printf 'port ÈúÄË¶Å 1024-65535 ‰πãÈó¥ÁöÑÊï∞ÂÄº'
      ;;
    worktree_exists)
      printf 'worktree Ë∑ØÂæÑÂ∑≤Â≠òÂú®: %s' "$1"
      ;;
    config_list_no_args)
      printf 'config list ‰∏çÊé•ÂèóÈ¢ùÂ§ñÂèÇÊï∞'
      ;;
    config_get_requires_key)
      printf 'config get ÈúÄË¶ÅÊèê‰æõ key'
      ;;
    config_get_requires_exactly_one)
      printf 'config get ÈúÄË¶Å‰∏î‰ªÖÈúÄË¶Å‰∏Ä‰∏™ key'
      ;;
    config_key_not_found)
      printf 'Êú™ÊâæÂà∞ÈÖçÁΩÆÈ°π: %s' "$1"
      ;;
    config_unset_requires_key)
      printf 'config unset ÈúÄË¶ÅÊèê‰æõ key'
      ;;
    config_unset_requires_exactly_one)
      printf 'config unset ÈúÄË¶Å‰∏î‰ªÖÈúÄË¶Å‰∏Ä‰∏™ key'
      ;;
    config_unknown_option)
      printf 'Êú™Áü•ÁöÑ config ÈÄâÈ°π: %s' "$1"
      ;;
    config_expect_key_or_value)
      printf 'config ÈúÄË¶Å <key> Êàñ <key> <value>'
      ;;
    shell_hook_requires_shell)
      printf 'shell-hook ÈúÄË¶ÅÊåáÂÆö shellÔºàbash Êàñ zshÔºâ'
      ;;
    shell_hook_unsupported_shell)
      printf 'shell-hook ‰∏çÊîØÊåÅÁöÑ shell: %sÔºà‰ªÖÊîØÊåÅ bash„ÄÅzshÔºâ' "$1"
      ;;
    branch_requires_value)
      printf 'branch ÈúÄË¶ÅÊåáÂÆöÂÄº'
      ;;
    init_unknown_option)
      printf 'init ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
      ;;
    init_no_positional)
      printf 'init ‰∏çÊé•Âèó‰ΩçÁΩÆÂèÇÊï∞'
      ;;
    init_forbid_home)
      printf 'Á¶ÅÊ≠¢Âú®ÂÆ∂ÁõÆÂΩïËøêË°å wt initÔºà%sÔºâ' "$1"
      ;;
    init_run_inside_git)
      printf 'ËØ∑Âú® git ‰ªìÂ∫ì‰∏≠ËøêË°å wt init'
      ;;
    remove_unknown_option)
      printf 'remove ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
      ;;
    remove_accepts_at_most_one)
      printf 'remove ÊúÄÂ§öÂè™Êé•Âèó‰∏Ä‰∏™ worktree ÂêçÁß∞'
      ;;
    cannot_remove_main)
      printf '‰∏çËÉΩÁßªÈô§‰∏ª worktree'
      ;;
    specify_worktree_or_inside)
      printf 'ÊåáÂÆö worktree ÂêçÁß∞ÊàñÂú® worktree ÁõÆÂΩï‰∏≠ËøêË°å'
      ;;
    remove_failed)
      printf 'ÁßªÈô§ worktree Â§±Ë¥•'
      ;;
    clean_no_args)
      printf 'clean ‰∏çÊé•ÂèóÂèÇÊï∞'
      ;;
    invalid_language)
      printf '‰∏çÊîØÊåÅÁöÑËØ≠Ë®Ä: %sÔºàÊîØÊåÅ en„ÄÅzhÔºâ' "$1"
      ;;
    uninstall_auto_detected_shell)
      printf 'Ëá™Âä®Ê£ÄÊµãÂà∞ shell: %s' "$1"
      ;;
    uninstall_requires_shell_value)
      printf '--shell ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
      ;;
    uninstall_requires_prefix_value)
      printf '--prefix ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
      ;;
    uninstall_invalid_shell)
      printf 'Êó†ÊïàÁöÑ shell Á±ªÂûã: %sÔºàÂèØÈÄâ zsh„ÄÅbash Êàñ noneÔºâ' "$1"
      ;;
    uninstall_unknown_option)
      printf 'uninstall Êú™Áü•ÈÄâÈ°π: %s' "$1"
      ;;
    uninstall_no_positional)
      printf 'uninstall ‰∏çÊé•ÂèóÈ¢ùÂ§ñ‰ΩçÁΩÆÂèÇÊï∞'
      ;;
    uninstall_removed_binary)
      printf 'Â∑≤‰ªé %s Âà†Èô§ wt' "$1"
      ;;
    uninstall_binary_missing)
      printf 'Âú® %s Êú™ÊâæÂà∞ wtÔºàÂèØËÉΩÂ∑≤Âà†Èô§Ôºâ' "$1"
      ;;
    uninstall_removed_messages)
      printf 'Â∑≤‰ªé %s Âà†Èô§ wt Ê∂àÊÅØÊñá‰ª∂' "$1"
      ;;
    uninstall_shell_config_missing)
      printf 'Êú™ÊâæÂà∞ shell ÈÖçÁΩÆÊñá‰ª∂ %sÔºåË∑≥Ëøá„ÄÇ' "$1"
      ;;
    uninstall_shell_hook_missing)
      printf 'Êú™Âú® %s ÊâæÂà∞ wt shell hookÔºåË∑≥Ëøá„ÄÇ' "$1"
      ;;
    uninstall_backup_created)
      printf 'Â∑≤ÂàõÂª∫Â§á‰ªΩ: %s.backup.%s' "$1" "$2"
      ;;
    uninstall_shell_hook_removed)
      printf 'Â∑≤‰ªé %s ÁßªÈô§ wt shell hook' "$1"
      ;;
    uninstall_unknown_shell_type)
      printf 'Ë≠¶Âëä: Êú™Áü• shell Á±ªÂûã %sÔºåË∑≥Ëøá shell Ê∏ÖÁêÜ' "$1"
      ;;
    uninstall_skip_shell_cleanup)
      printf 'Ë∑≥Ëøá shell ÈÖçÁΩÆÊ∏ÖÁêÜÔºà‰ΩøÁî® --shell zsh Êàñ --shell bash ÂèØÊâßË°åÊ∏ÖÁêÜÔºâ'
      ;;
    uninstall_complete)
      printf 'Âç∏ËΩΩÂÆåÊàê„ÄÇ'
      ;;
    uninstall_config_backup_created)
      printf 'Â∑≤Â∞Ü wt ÈÖçÁΩÆ‰ªé %s Â§á‰ªΩÂà∞ %s' "$1" "$2"
      ;;
    uninstall_worktrees_preserved)
      printf 'Ê≥®ÊÑè: Â∑≤ÂàõÂª∫ÁöÑ worktree ‰∏ç‰ºöÂà†Èô§'
      ;;
    update_unknown_option)
      printf 'update Êú™Áü•ÈÄâÈ°π: %s' "$1"
      ;;
    update_no_positional)
      printf 'update ‰∏çÊé•Âèó‰ΩçÁΩÆÂèÇÊï∞'
      ;;
    curl_required)
      printf 'ÈúÄË¶ÅÂÆâË£Ö curl'
      ;;
    temp_dir_failed)
      printf 'Êó†Ê≥ïÂàõÂª∫‰∏¥Êó∂ÁõÆÂΩï'
      ;;
    update_fetch)
      printf 'Ê≠£Âú®‰∏ãËΩΩ %s' "$1"
      ;;
    update_download_failed)
      printf '‰∏ãËΩΩÂ§±Ë¥•: %s' "$1"
      ;;
    update_create_prefix_failed)
      printf 'Êó†Ê≥ïÂáÜÂ§áÂÆâË£ÖÁõÆÂΩï %s' "$1"
      ;;
    update_binary_unchanged)
      printf 'wt Âú® %s Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨' "$1"
      ;;
    update_binary_installed)
      printf 'Â∑≤Êõ¥Êñ∞ wt Âà∞ %s' "$1"
      ;;
    update_messages_unchanged)
      printf 'messages Âú® %s Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨' "$1"
      ;;
    update_messages_installed)
      printf 'Â∑≤Êõ¥Êñ∞ messages Âà∞ %s' "$1"
      ;;
    update_install_failed)
      printf 'ÂÜôÂÖ• %s Â§±Ë¥•' "$1"
      ;;
    update_already_latest)
      printf 'ÂΩìÂâç wt Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨'
      ;;
    update_complete)
      printf '‚úÖ Êõ¥Êñ∞ÂÆåÊàê„ÄÇÂ¶ÇÂú®ÂÖ∂ÂÆÉÁªàÁ´ØËøêË°å wtÔºåËØ∑ÈáçÂêØÁªàÁ´Ø„ÄÇ'
      ;;
    *)
      printf '%s' "$key"
      ;;
  esac
}
