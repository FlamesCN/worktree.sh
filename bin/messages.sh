# shellcheck shell=bash

msg_en() {
  local key="${1:-}"
  shift || true
  case "$key" in
  copy_env_file)
    printf 'üìÑ Copy %s ‚Üí %s' "$1" "$2"
    ;;
  copy_env_missing)
    printf '‚ö†Ô∏è  Skipping copy; source not found: %s' "$1"
    ;;
  command_not_found)
    printf '‚ö†Ô∏è  Command not available: %s; skipping' "$1"
    ;;
  start_dev_port)
    printf 'üöÄ Starting dev command (port %s)' "$1"
    ;;
  start_dev_default)
    printf 'üöÄ Starting dev command'
    ;;
  start_dev_generic)
    printf 'üöÄ Starting dev command'
    ;;
  dev_started_port)
    printf '‚úÖ Dev command running on port %s' "$1"
    ;;
  dev_started_default)
    printf '‚úÖ Dev command running'
    ;;
  dev_failed)
    printf '‚ö†Ô∏è Dev command may not have started correctly (PID: %s); check %s' "$1" "$2"
    ;;
  dev_log_hint)
    printf 'üìù Dev command log: tail -f %s' "$1"
    ;;
  install_skipped_no_command)
    printf '‚öôÔ∏è  Dependencies skipped (no command configured)'
    ;;
  install_skipped_missing_lock)
    printf '‚ö†Ô∏è  Skipping dependency install (%s): no package-lock.json or npm-shrinkwrap.json found' "$1"
    ;;
  install_detected)
    printf 'üîç Auto-detected install command: %s' "$1"
    ;;
  serve_detected)
    printf 'üîç Auto-detected dev command: %s' "$1"
    ;;
  dev_command)
    printf 'üöÄ Dev command: %s' "$1"
    ;;
  dev_skipped_no_command)
    printf '‚öôÔ∏è  Dev command skipped (no command configured)'
    ;;
  dev_skipped_no_port)
    printf '‚öôÔ∏è  Dev command skipped (no port inferred from worktree name)'
    ;;
  auto_cd_pending)
    printf 'üí° wt auto-cd appears inactive. Try running: %s' "$1"
    ;;
  auto_cd_retry)
    printf '   If that command fails, reopen your terminal.'
    ;;
  auto_cd_disabled)
    printf 'üí° wt auto-cd is not enabled. To jump automatically, run: %s' "$1"
    ;;
  auto_cd_reload)
    printf '   Then reload your shell (e.g. open a new terminal).'
    ;;
  auto_cd_execute)
    printf '   Then run: %s (or reopen the terminal).' "$1"
    ;;
  reserved_port)
    printf '‚ö†Ô∏è  %s is a reserved port (1-1023); the dev command will not use it.' "$1"
    ;;
  port_out_of_range)
    printf '‚ö†Ô∏è  %s is outside the valid port range (65535); falling back to default port.' "$1"
    ;;
  fallback_default_port)
    printf '‚ö†Ô∏è  Using default port 3000 for the dev command.'
    ;;
  dev_skipped_reserved_port)
    printf '‚öôÔ∏è  Dev command skipped because %s is a reserved port (<1024)' "$1"
    ;;
  creating_worktree)
    printf 'üîß Creating worktree: %s (branch %s)' "$1" "$2"
    ;;
  add_branch_prefix_fallback)
    printf '‚ö†Ô∏è  Branch "%s" already exists; using branch prefix %s for this worktree\n   Persist via: wt config set add.branch-prefix %s' "$1" "$2" "$3"
    ;;
  add_branch_prefix_exhausted)
    printf 'wt add could not find a usable branch prefix (example: %s); configure add.branch-prefix and retry.' "$1"
    ;;
  worktree_created)
    printf '‚úÖ Worktree created'
    ;;
  installing_dependencies)
    printf 'üì¶ Installing dependencies (%s)' "$1"
    ;;
  dev_skipped_config)
    printf '‚öôÔ∏è  Dev command skipped per configuration'
    ;;
  worktree_ready)
    printf '‚úÖ Worktree ready: %s' "$1"
    ;;
  init_set_project)
    printf '\n\033[94;1m%-11s\033[0m ‚Üí \033[32m%s\033[0m\n' 'repo.path' "$1"
    ;;
  init_branch_option_deprecated)
    printf '  repo.branch has been removed; ignoring requested branch "%s"\n' "$1"
    ;;
  init_slug_failed)
    printf 'failed to derive project slug from the current repository'
    ;;
  init_slug_mismatch)
    printf 'existing project %s points to %s (current repo: %s); aborting' "$1" "$2" "$3"
    ;;
  init_created_project)
    printf '\033[94;1m%-11s\033[0m ‚Üí \033[32m%s\033[0m\n' 'config file' "$2"
    ;;
  init_done)
    printf 'wt init completed successfully.\n'
    ;;
  lang_set_requires)
    printf 'wt lang set requires exactly one argument (en or zh)'
    ;;
  lang_unknown_command)
    printf 'Unknown wt lang command: %s' "$1"
    ;;
  lang_prompt_select)
    printf 'Choose interface language:'
    ;;
  lang_option_en_label)
    printf 'English'
    ;;
  lang_option_en_hint)
    printf 'English interface'
    ;;
  lang_option_zh_label)
    printf '‰∏≠Êñá (Chinese)'
    ;;
  lang_option_zh_hint)
    printf 'Chinese interface'
    ;;
  lang_option_reset_label)
    printf 'Reset to default'
    ;;
  lang_option_reset_hint)
    printf 'Restore English (default)'
    ;;
  lang_set_success)
    printf 'Language set to %s (%s)' "$1" "$2"
    ;;
  lang_reset_success)
    printf 'Language reset to %s (%s)' "$1" "$2"
    ;;
  lang_current)
    printf 'Current language: %s (%s)' "$1" "$2"
    ;;
  theme_set_requires)
    printf 'theme set requires <box|sage|archer>'
    ;;
  invalid_theme)
    printf 'unknown theme: %s (expected box, sage, or archer)' "$1"
    ;;
  theme_set_success)
    printf 'Theme set to %s' "$2"
    ;;
  theme_reset_success)
    printf 'Theme reset to %s' "$2"
    ;;
  theme_current)
    printf 'Current theme: %s' "$2"
    ;;
  theme_option_box_label)
    printf 'box'
    ;;
  theme_option_box_hint)
    printf 'Use framed headers for wt list'
    ;;
  theme_option_sage_label)
    printf 'sage'
    ;;
  theme_option_sage_hint)
    printf 'Use minimal headers for wt list (includes path)'
    ;;
  theme_option_archer_label)
    printf 'archer'
    ;;
  theme_option_archer_hint)
    printf 'Use compact headers without project path'
    ;;
  theme_option_reset_label)
    printf 'Reset to default'
    ;;
  theme_option_reset_hint)
    printf 'Restore boxed theme'
    ;;
  theme_prompt_select)
    printf 'Select a theme for wt list output:'
    ;;
  theme_selection_cancelled)
    printf 'Theme selection cancelled'
    ;;
  theme_unknown_command)
    printf 'unknown theme command: %s' "$1"
    ;;
  theme_usage)
    cat << 'THEME_USAGE_EN'
wt theme - Manage worktree.sh list layout theme

Interactive (TTY):
  wt theme                 Choose theme with arrow keys

Non-interactive:
  wt theme get                     Print current theme code
  wt theme set <box|sage|archer>   Switch theme
  wt theme reset                   Reset to default (box)
  wt theme box|sage|archer         Shortcut for wt theme set
  wt theme help                    Show this help
THEME_USAGE_EN
    ;;
  lang_usage)
    cat << 'LANG_USAGE_EN'
wt lang - Manage worktree.sh interface language

Interactive (TTY):
  wt lang                  Choose language with arrow keys

Non-interactive:
  wt lang get              Print current language code
  wt lang set <en|zh>      Switch language
  wt lang reset            Reset to default (English)
  wt lang en|zh            Shortcut for wt lang set
  wt lang help             Show this help
LANG_USAGE_EN
    ;;
  init_prompt_repo_path)
    printf 'Repository path for wt to track?'
    ;;
  init_prompt_copy_env)
    printf 'Copy environment files automatically?'
    ;;
  init_prompt_copy_env_files)
    printf 'Which environment files should be copied?'
    ;;
  init_prompt_install_command)
    printf 'Which command installs dependencies?'
    ;;
  init_prompt_install_custom)
    printf 'Enter a custom install command:'
    ;;
  init_install_option_npm_ci_hint)
    printf 'uses package-lock.json'
    ;;
  init_install_option_npm_install_hint)
    printf 'skips lockfile optimizations'
    ;;
  init_install_option_pnpm_install_hint)
    printf 'requires pnpm-lock.yaml'
    ;;
  init_install_option_yarn_install_hint)
    printf 'requires yarn.lock'
    ;;
  init_install_option_bun_install_hint)
    printf 'requires Bun'
    ;;
  init_install_option_uv_sync_hint)
    printf 'Python projects using uv'
    ;;
  init_install_option_poetry_install_hint)
    printf 'Python projects using Poetry'
    ;;
  init_install_option_pipenv_install_hint)
    printf 'Python projects using Pipenv'
    ;;
  init_install_option_pdm_install_hint)
    printf 'Python projects using PDM'
    ;;
  init_install_option_rye_install_hint)
    printf 'Python projects using Rye'
    ;;
  init_install_option_hatch_install_hint)
    printf 'Python projects using Hatch'
    ;;
  init_install_option_conda_hint)
    printf 'Python projects using Conda environment files'
    ;;
  init_install_option_pip_create_venv_hint)
    printf 'Creates a virtualenv and installs dependencies'
    ;;
  init_install_option_pip_requirements_hint)
    printf 'Installs from requirements.txt'
    ;;
  init_install_option_skip_label)
    printf 'None'
    ;;
  init_install_option_skip_hint)
    printf 'Skip automatic dependency installation'
    ;;
  init_install_option_custom_label)
    printf 'Custom command'
    ;;
  init_install_option_custom_hint)
    printf 'Provide your own install command'
    ;;
  init_install_option_detected_hint)
    printf 'Detected from repository files'
    ;;
  init_install_option_existing_hint)
    printf 'Existing project configuration'
    ;;
  init_prompt_serve_command)
    printf 'Which command starts the dev server?'
    ;;
  init_prompt_serve_custom)
    printf 'Enter a custom dev command:'
    ;;
  init_serve_option_npm_run_dev_hint)
    printf 'npm run dev (package.json scripts)'
    ;;
  init_serve_option_pnpm_dev_hint)
    printf 'pnpm dev (package.json scripts)'
    ;;
  init_serve_option_yarn_dev_hint)
    printf 'yarn dev (package.json scripts)'
    ;;
  init_serve_option_bun_dev_hint)
    printf 'bun dev (package.json scripts)'
    ;;
  init_serve_option_uv_run_hint)
    printf 'uv run (Python dev server)'
    ;;
  init_serve_option_poetry_run_hint)
    printf 'poetry run (manages virtualenv automatically)'
    ;;
  init_serve_option_pipenv_run_hint)
    printf 'pipenv run (manages virtualenv automatically)'
    ;;
  init_serve_option_pdm_run_hint)
    printf 'pdm run (manages virtualenv automatically)'
    ;;
  init_serve_option_rye_run_hint)
    printf 'rye run (manages virtualenv automatically)'
    ;;
  init_serve_option_hatch_run_hint)
    printf 'hatch run (manages virtualenv automatically)'
    ;;
  init_serve_option_conda_hint)
    printf 'conda run (uses the Conda environment)'
    ;;
  init_serve_option_pip_venv_hint)
    printf 'Use commands from the project virtualenv'
    ;;
  init_serve_option_manage_runserver_hint)
    printf 'Django manage.py runserver'
    ;;
  init_serve_option_python_app_hint)
    printf 'python app.py'
    ;;
  init_serve_option_skip_label)
    printf 'None'
    ;;
  init_serve_option_skip_hint)
    printf 'Skip automatic dev server startup'
    ;;
  init_serve_option_custom_label)
    printf 'Custom command'
    ;;
  init_serve_option_custom_hint)
    printf 'Provide your own dev command'
    ;;
  init_serve_option_detected_hint)
    printf 'Detected from repository files'
    ;;
  init_serve_option_existing_hint)
    printf 'Existing project configuration'
    ;;
  init_prompt_serve_logging_path)
    printf 'Where should dev logs be written? (leave empty to disable)'
    ;;
  init_prompt_branch_prefix)
    printf 'Preferred worktree branch prefix?'
    ;;
  init_prompt_branch_custom)
    printf 'Enter a custom branch prefix:'
    ;;
  init_branch_option_current_hint)
    printf 'Current configuration'
    ;;
  init_branch_option_default_hint)
    printf 'Default prefix (recommended)'
    ;;
  init_branch_option_alternative_hint)
    printf 'Common alternative prefix'
    ;;
  init_branch_option_skip_label)
    printf 'Keep current setting'
    ;;
  init_branch_option_skip_hint)
    printf 'Leave the prefix unchanged'
    ;;
  init_branch_option_custom_label)
    printf 'Custom prefix'
    ;;
  init_branch_option_custom_hint)
    printf 'Provide your own branch prefix'
    ;;
  aborted)
    printf 'Aborted'
    ;;
  removing_worktree)
    printf 'üóëÔ∏è  Removing worktree: %s' "$1"
    ;;
  removed_branch)
    printf 'üóÇÔ∏è  Deleted branch %s' "$1"
    ;;
  worktree_removed)
    printf '‚úÖ Removed worktree %s' "$1"
    ;;
  current_worktree_removed)
    printf 'üìÅ Current worktree removed; switching back to the main directory'
    ;;
  merge_requires_name)
    printf 'merge requires a worktree name (e.g. wt merge 123)'
    ;;
  merge_invalid_target)
    printf 'merge resolves %s (worktree %s) ‚Üí %s (main workspace); wt merge expects a feature branch. Rename the worktree or adjust the branch prefix.' "$1" "$2" "$3"
    ;;
  merge_base_dirty)
    printf 'main workspace has uncommitted changes; commit or stash before merging'
    ;;
  merge_branch_not_found)
    printf 'feature branch not found: %s' "$1"
    ;;
  merge_feat_dirty)
    printf 'worktree %s has uncommitted changes; commit or stash before merging' "$1"
    ;;
  merge_no_commits)
    printf 'no new commits on %s relative to %s; nothing to merge' "$1" "$2"
    ;;
  merge_start)
    printf 'üîÄ Merging %s into %s' "$1" "$2"
    ;;
  merge_conflict_abort)
    printf '‚ö†Ô∏è Merge conflict; merge manually or enlist an LLM to resolve/conflict-fix/port changes, then rerun'
    ;;
  merge_done)
    printf '‚úÖ Merge complete: %s ‚Üí %s' "$1" "$2"
    ;;
  merge_cleanup_hint)
    printf 'üßπ Consider cleaning up the worktree with: wt rm %s' "$1"
    ;;
  project_branch_required)
    printf 'main workspace is on a detached HEAD; checkout a branch and retry'
    ;;
  project_directory_required)
    printf 'run this command from %s or one of its subdirectories' "$1"
    ;;
  sync_requires_target)
    printf 'sync requires "all" or one or more worktree names'
    ;;
  sync_invalid_all)
    printf 'sync "all" cannot be combined with additional names'
    ;;
  sync_base_dirty)
    printf 'main workspace has unstaged or untracked changes; commit or stash before syncing'
    ;;
  sync_skip_base)
    printf '‚öôÔ∏è  Skipping base workspace (%s)' "$1"
    ;;
  sync_no_targets)
    printf 'no worktrees found to sync'
    ;;
  sync_no_staged)
    printf 'no staged changes to sync; run git add first'
    ;;
  sync_patch_failed)
    printf 'failed to prepare staged diff for syncing'
    ;;
  sync_target_dirty)
    printf 'worktree %s is dirty (%s); commit or stash before syncing' "$1" "$2"
    ;;
  sync_apply_failed)
    printf '‚ö†Ô∏è  Failed to sync staged changes to %s; apply manually' "$1"
    ;;
  sync_apply_start)
    printf 'üì§ Syncing staged changes to %s' "$1"
    ;;
  sync_apply_done)
    printf '‚úÖ Synced %s' "$1"
    ;;
  sync_done)
    printf '‚úÖ Sync complete (%s worktree(s) updated)' "$1"
    ;;
  cleaning_worktree)
    printf 'üßπ Cleaning worktree: %s' "$1"
    ;;
  cleaned_count)
    printf '‚úÖ Cleaned %s worktree(s)' "$1"
    ;;
  cleaned_none)
    printf '‚úÖ No numeric worktrees to clean'
    ;;
  clean_switch_back)
    printf 'üìÅ Current worktree was cleaned; switching back to the main directory'
    ;;
  remove_confirm_prompt)
    printf 'Remove worktree %s? [Y/n]' "$1"
    ;;
  remove_confirm_prompt_global)
    printf 'Remove %s from project %s at %s? [Y/n]' "$1" "$2" "$3"
    ;;
  remove_failed)
    printf 'Failed to remove %s' "$1"
    ;;
  detach_prompt_worktree)
    printf 'Remove worktree %s? [Y/n]' "$1"
    ;;
  detach_abort_user)
    printf 'Detach aborted by user'
    ;;
  detach_remove_failed)
    printf 'Failed to remove %s: %s' "$1" "$2"
    ;;
  detach_summary_removed)
    printf 'Removed %s worktree(s)' "$1"
    ;;
  detach_summary_failed)
    printf 'Failed to remove %s (%s)' "$1" "$2"
    ;;
  detach_summary_skipped)
    printf 'Skipped %s pending worktree(s)' "$1"
    ;;
  detach_prompt_project)
    printf 'Detach project %s? [Y/n]' "$1"
    ;;
  detach_done)
    printf '‚úÖ Detached project %s' "$1"
    ;;
  detach_project_missing)
    printf 'Project %s is not configured; nothing to detach' "$1"
    ;;
  detach_no_projects)
    printf 'No projects are registered yet; run wt init first'
    ;;
  detach_unknown_option)
    printf 'unknown option for detach: %s' "$1"
    ;;
  clean_confirm_prompt)
    printf 'Remove numeric worktree %s from project %s (%s)? [Y/n]' "$1" "$2" "$3"
    ;;
  select_navigation_hint)
    printf '(Use ‚Üë/‚Üì or j/k to move, Enter to confirm, Ctrl+C to cancel. Digits jump directly.)'
    ;;
  prompt_yes_label)
    printf 'Yes'
    ;;
  prompt_no_label)
    printf 'No'
    ;;
  prompt_choice_hint)
    printf '%s' '- Use arrow keys. Enter to confirm, Ctrl+C to cancel.'
    ;;
  prompt_default_hint)
    printf 'Default (press Enter to keep): %s' "$1"
    ;;
  prompt_empty_display)
    printf '(empty)'
    ;;
  select_project_prompt)
    printf 'Select a project:'
    ;;
  select_project_option)
    if [ -n "${3:-}" ]; then
      printf '  [%d] %s (%s) ‚Äî %s' "$1" "$2" "$3" "$4"
    else
      printf '  [%d] %s ‚Äî %s' "$1" "$2" "$4"
    fi
    ;;
  select_project_input)
    printf 'Enter a number (1-%s) or press Enter to cancel:' "$1"
    ;;
  select_project_invalid)
    printf 'Please enter a number between 1 and %s.' "$1"
    ;;
  select_worktree_prompt)
    printf 'Select a matching worktree:'
    ;;
  select_worktree_option)
    printf '  [%d] %s (project %s) ‚Äî %s' "$1" "$2" "$3" "$4"
    ;;
  select_worktree_input)
    printf 'Enter a number (1-%s) or press Enter to cancel:' "$1"
    ;;
  select_worktree_invalid)
    printf 'Please enter a number between 1 and %s.' "$1"
    ;;
  config_set_requires)
    printf 'config set requires <key> <value>'
    ;;
  temp_file_failed)
    printf 'failed to allocate temp file'
    ;;
  config_unset_requires)
    printf 'config unset requires <key>'
    ;;
  config_file_missing)
    printf 'config file not found: %s' "$1"
    ;;
  config_key_not_set)
    printf 'config key not set: %s' "$1"
    ;;
  config_update_failed)
    printf 'failed to update config'
    ;;
  git_required)
    printf 'git is required'
    ;;
  project_not_found)
    printf 'project directory not found: %s' "$1"
    ;;
  project_dir_unset)
    printf 'wt is not configured yet; run "wt init" inside your repository first'
    ;;
  project_selection_cancelled)
    printf 'Project selection cancelled'
    ;;
  project_path_missing)
    printf 'Project %s has no valid repo.path; run wt init inside the repository again' "$1"
    ;;
  git_command_failed)
    printf 'git command failed in %s' "$1"
    ;;
  command_requires_project)
    printf 'This command must be run inside a configured project'
    ;;
  list_no_args)
    printf 'list takes no arguments'
    ;;
  list_global_project_header)
    printf 'üìÅ %s' "$1"
    ;;
  list_global_worktree_entry)
    local marker="$1"
    local name="$2"
    local branch="$3"
    local hash="$4"
    local path="$5"
    printf '  %s %-13s %-18s %-8s  %s' "$marker" "$name" "$branch" "$hash" "$path"
    ;;
  main_no_args)
    printf 'main takes no arguments'
    ;;
  no_projects_configured)
    printf 'No projects are configured yet; run wt init inside a repository first'
    ;;
  path_requires_name)
    printf 'path requires exactly one worktree name'
    ;;
  worktree_not_found)
    printf 'worktree not found: %s' "$1"
    ;;
  add_requires_name)
    printf 'add requires a worktree name'
    ;;
  add_unknown_option)
    printf 'unknown option for add: %s' "$1"
    ;;
  unexpected_extra_argument)
    printf 'unexpected extra argument: %s' "$1"
    ;;
  invalid_worktree_name)
    printf 'invalid worktree name: %s (no /, \\, ~, dot segments, or whitespace)' "$1"
    ;;
  port_requires_numeric)
    printf 'port requires a numeric value between 1024 and 65535'
    ;;
  worktree_exists)
    printf 'worktree path already exists: %s' "$1"
    ;;
  config_list_no_args)
    printf 'config list takes no additional arguments'
    ;;
  config_list_empty)
    printf 'No stored config values found in %s (defaults in effect).' "$1"
    ;;
  config_get_requires_key)
    printf 'config get requires a key'
    ;;
  config_get_requires_exactly_one)
    printf 'config get requires exactly one key'
    ;;
  config_key_not_found)
    printf 'config key not found: %s' "$1"
    ;;
  config_unset_requires_key)
    printf 'config unset requires a key'
    ;;
  config_unset_requires_exactly_one)
    printf 'config unset requires exactly one key'
    ;;
  config_unknown_option)
    printf 'unknown config option: %s' "$1"
    ;;
  config_expect_key_or_value)
    printf 'config expects <key> or <key> <value>'
    ;;
  shell_hook_requires_shell)
    printf 'shell-hook requires a shell (bash or zsh)'
    ;;
  shell_hook_unsupported_shell)
    printf 'unsupported shell for shell-hook: %s (supported: bash, zsh)' "$1"
    ;;
  branch_requires_value)
    printf 'branch requires a value'
    ;;
  init_unknown_option)
    printf 'unknown option for init: %s' "$1"
    ;;
  init_no_positional)
    printf 'init takes no positional arguments'
    ;;
  init_forbid_home)
    printf 'wt init cannot target your home directory (%s)' "$1"
    ;;
  init_run_inside_git)
    printf 'run wt init inside a git repository'
    ;;
  remove_unknown_option)
    printf 'unknown option for remove: %s' "$1"
    ;;
  remove_accepts_at_most_one)
    printf 'remove accepts at most one worktree name'
    ;;
  cannot_remove_main)
    printf 'cannot remove the main worktree'
    ;;
  specify_worktree_or_inside)
    printf 'specify a worktree name or run from inside a worktree'
    ;;
  clean_no_args)
    printf 'clean takes no arguments'
    ;;
  invalid_language)
    printf 'unsupported language: %s (supported: en, zh)' "$1"
    ;;
  uninstall_auto_detected_shell)
    printf 'Auto-detected shell: %s' "$1"
    ;;
  uninstall_requires_shell_value)
    printf '--shell requires a value'
    ;;
  uninstall_requires_prefix_value)
    printf '--prefix requires a value'
    ;;
  uninstall_invalid_shell)
    printf 'Invalid shell type: %s (use zsh, bash, or none)' "$1"
    ;;
  uninstall_unknown_option)
    printf 'unknown option for uninstall: %s' "$1"
    ;;
  uninstall_no_positional)
    printf 'uninstall takes no positional arguments'
    ;;
  uninstall_removed_binary)
    printf 'Removed wt from %s' "$1"
    ;;
  uninstall_binary_missing)
    printf 'wt not found at %s (already removed?)' "$1"
    ;;
  uninstall_removed_messages)
    printf 'Removed wt messages from %s' "$1"
    ;;
  uninstall_shell_config_missing)
    printf 'Shell config file %s does not exist, skipping.' "$1"
    ;;
  uninstall_shell_hook_missing)
    printf 'No wt shell hook found in %s, skipping.' "$1"
    ;;
  uninstall_backup_created)
    printf 'Created backup: %s.backup.%s' "$1" "$2"
    ;;
  uninstall_shell_hook_removed)
    printf 'Removed wt shell hook from %s' "$1"
    ;;
  uninstall_unknown_shell_type)
    printf 'Warning: Unknown shell type %s, skipping shell cleanup' "$1"
    ;;
  uninstall_skip_shell_cleanup)
    printf 'Skipping shell configuration cleanup (use --shell zsh or --shell bash to clean)'
    ;;
  uninstall_complete)
    printf 'Uninstallation complete.'
    ;;
  uninstall_config_backup_created)
    printf 'Backed up wt config from %s to %s' "$1" "$2"
    ;;
  uninstall_worktrees_preserved)
    printf 'Note: Any existing worktrees were preserved'
    ;;
  reinstall_unknown_option)
    printf 'unknown option for reinstall: %s' "$1"
    ;;
  reinstall_no_positional)
    printf 'reinstall takes no positional arguments'
    ;;
  reinstall_requires_shell_value)
    printf '--shell requires a value'
    ;;
  reinstall_requires_prefix_value)
    printf '--prefix requires a value'
    ;;
  reinstall_script_missing)
    printf 'required script not found: %s' "$1"
    ;;
  reinstall_curl_required)
    printf 'curl is required to download reinstall helpers'
    ;;
  reinstall_fetch_remote_uninstall)
    printf 'Downloading uninstall.sh from %s' "$1"
    ;;
  reinstall_fetch_remote_install)
    printf 'Downloading install.sh from %s' "$1"
    ;;
  reinstall_fetch_failed)
    printf 'failed to download %s' "$1"
    ;;
  reinstall_running)
    printf 'Running %s' "$1"
    ;;
  reinstall_uninstall_failed)
    printf 'uninstall script failed: %s' "$1"
    ;;
  reinstall_install_failed)
    printf 'install script failed: %s' "$1"
    ;;
  reinstall_complete)
    printf '‚úÖ Reinstall complete. Restart your shell if wt was running elsewhere.'
    ;;
  *)
    printf '%s' "$key"
    ;;
  esac
}

msg_zh() {
  local key="${1:-}"
  shift || true
  case "$key" in
  copy_env_file)
    printf 'üìÑ Â§çÂà∂ %s ‚Üí %s' "$1" "$2"
    ;;
  copy_env_missing)
    printf '‚ö†Ô∏è  Ê∫êÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂ∑≤Ë∑≥ËøáÔºö%s' "$1"
    ;;
  command_not_found)
    printf '‚ö†Ô∏è  Êú™ÊâæÂà∞ÂëΩ‰ª§Ôºö%sÔºåÂ∑≤Ë∑≥Ëøá' "$1"
    ;;
  start_dev_port)
    printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§ÔºàÁ´ØÂè£ %sÔºâ' "$1"
    ;;
  start_dev_default)
    printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
    ;;
  start_dev_generic)
    printf 'üöÄ Ê≠£Âú®ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
    ;;
  dev_started_port)
    printf '‚úÖ ÂºÄÂèëÂëΩ‰ª§Â∑≤Âú®Á´ØÂè£ %s ËøêË°å' "$1"
    ;;
  dev_started_default)
    printf '‚úÖ ÂºÄÂèëÂëΩ‰ª§Â∑≤ÂêØÂä®'
    ;;
  dev_failed)
    printf '‚ö†Ô∏è ÂºÄÂèëÂëΩ‰ª§ËøõÁ®ãÂèØËÉΩÊú™Ê≠£Á°ÆÂêØÂä® (PID: %s)ÔºåËØ∑Ê£ÄÊü• %s' "$1" "$2"
    ;;
  dev_log_hint)
    printf 'üìù ÂºÄÂèëÂëΩ‰ª§Êó•ÂøóÔºötail -f %s' "$1"
    ;;
  install_skipped_no_command)
    printf '‚öôÔ∏è  Êú™ÈÖçÁΩÆÂÆâË£ÖÂëΩ‰ª§ÔºåË∑≥Ëøá‰æùËµñÂÆâË£Ö'
    ;;
  install_skipped_missing_lock)
    printf '‚ö†Ô∏è  Áº∫Â∞ë package-lock.json Êàñ npm-shrinkwrap.jsonÔºåÂ∑≤Ë∑≥Ëøá‰æùËµñÂÆâË£ÖÔºà%sÔºâ' "$1"
    ;;
  install_detected)
    printf 'üîç Ëá™Âä®Ê£ÄÊµãÂà∞ÂÆâË£ÖÂëΩ‰ª§Ôºö%s' "$1"
    ;;
  serve_detected)
    printf 'üîç Ëá™Âä®Ê£ÄÊµãÂà∞ÂºÄÂèëÂëΩ‰ª§Ôºö%s' "$1"
    ;;
  dev_command)
    printf 'üöÄ ÂºÄÂèëÂëΩ‰ª§Ôºö%s' "$1"
    ;;
  dev_skipped_no_command)
    printf '‚öôÔ∏è  Êú™ÈÖçÁΩÆÂºÄÂèëÂëΩ‰ª§ÔºåÂ∑≤Ë∑≥Ëøá'
    ;;
  dev_skipped_no_port)
    printf '‚öôÔ∏è  Êú™ËÉΩ‰ªéÂêçÁß∞Êé®ÂØºÁ´ØÂè£ÔºåÂ∑≤Ë∑≥ËøáÂºÄÂèëÂëΩ‰ª§'
    ;;
  auto_cd_pending)
    printf 'üí° Ê£ÄÊµãÂà∞ wt Ëá™Âä®ÂàáÊç¢ÁõÆÂΩïÂ∞öÊú™ÁîüÊïà„ÄÇÂ∞ùËØïËøêË°åÔºö%s' "$1"
    ;;
  auto_cd_retry)
    printf '   Â¶ÇÊûúÂëΩ‰ª§Êó†ÊïàÔºåËØ∑ÈáçÊñ∞ÊâìÂºÄ‰∏Ä‰∏™ÁªàÁ´Ø„ÄÇ'
    ;;
  auto_cd_disabled)
    printf 'üí° Ê£ÄÊµãÂà∞ wt Ëá™Âä®ÂàáÊç¢ÁõÆÂΩïÊú™ÂêØÁî®„ÄÇËã•Â∏åÊúõÁõ¥Êé•Ë∑≥ËΩ¨ÔºåÂèØËøêË°åÔºö%s' "$1"
    ;;
  auto_cd_reload)
    printf '   ÁÑ∂ÂêéÈáçÊñ∞Âä†ËΩΩÂΩìÂâç shellÔºà‰æãÂ¶ÇÈáçÊñ∞ÊâìÂºÄ‰∏Ä‰∏™ÁªàÁ´ØÔºâ„ÄÇ'
    ;;
  auto_cd_execute)
    printf '   ÁÑ∂ÂêéÊâßË°åÔºö%sÔºàÊàñÈáçÊñ∞ÊâìÂºÄÁªàÁ´ØÔºâ„ÄÇ' "$1"
    ;;
  reserved_port)
    printf '‚ö†Ô∏è  %s ÊòØ‰øùÁïôÁ´ØÂè£ (1-1023)Ôºå‰∏ç‰ºöÁî®‰∫éÂºÄÂèëÂëΩ‰ª§' "$1"
    ;;
  port_out_of_range)
    printf '‚ö†Ô∏è  %s Ë∂ÖÂá∫ÊúâÊïàÁ´ØÂè£ËåÉÂõ¥ (65535)ÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§Á´ØÂè£' "$1"
    ;;
  fallback_default_port)
    printf '‚ö†Ô∏è  Â∞Ü‰ΩøÁî®ÈªòËÆ§Á´ØÂè£ 3000 ÂêØÂä®ÂºÄÂèëÂëΩ‰ª§'
    ;;
  dev_skipped_reserved_port)
    printf '‚öôÔ∏è  Ê£ÄÊµãÂà∞ %s ‰∏∫‰øùÁïôÁ´ØÂè£ (<1024)ÔºåÂ∑≤Ë∑≥ËøáÂºÄÂèëÂëΩ‰ª§' "$1"
    ;;
  creating_worktree)
    printf 'üîß ÂàõÂª∫ worktree: %s (ÂàÜÊîØ %s)' "$1" "$2"
    ;;
  add_branch_prefix_fallback)
    printf '‚ö†Ô∏è  Ê£ÄÊµãÂà∞‰ªìÂ∫ìÂ∑≤Â≠òÂú®ÂàÜÊîØ "%s"ÔºåÊú¨Ê¨°Â∞Ü‰ΩøÁî®ÂàÜÊîØÂâçÁºÄ %s ÂàõÂª∫ worktree\n   Ëã•ÈúÄÂõ∫ÂÆöÈÖçÁΩÆÔºöwt config set add.branch-prefix %s' "$1" "$2" "$3"
    ;;
  add_branch_prefix_exhausted)
    printf 'wt add Êú™ËÉΩÊâæÂà∞ÂèØÁî®ÁöÑÂàÜÊîØÂâçÁºÄÔºà‰æãÂ¶ÇÔºö%sÔºâÔºõËØ∑ÊâãÂä®ËÆæÁΩÆ add.branch-prefix ÂêéÈáçËØï„ÄÇ' "$1"
    ;;
  worktree_created)
    printf '‚úÖ worktree ÂàõÂª∫ÂÆåÊàê'
    ;;
  installing_dependencies)
    printf 'üì¶ ÂÆâË£Ö‰æùËµñ (%s)' "$1"
    ;;
  dev_skipped_config)
    printf '‚öôÔ∏è  Ê†πÊçÆÈÖçÁΩÆÂ∑≤Ë∑≥ËøáÂºÄÂèëÂëΩ‰ª§'
    ;;
  worktree_ready)
    printf '‚úÖ Êñ∞ worktree Â∞±Áª™: %s' "$1"
    ;;
  init_set_project)
    printf '\n\033[94;1m%-11s\033[0m ‚Üí \033[32m%s\033[0m\n' 'repo.path' "$1"
    ;;
  init_branch_option_deprecated)
    printf '  repo.branch Â∑≤ÁßªÈô§ÔºõÂøΩÁï•‰º†ÂÖ•ÁöÑÂàÜÊîØ "%s"\n' "$1"
    ;;
  init_slug_failed)
    printf 'Êó†Ê≥ï‰ªéÂΩìÂâç‰ªìÂ∫ìËß£ÊûêÈ°πÁõÆ slug'
    ;;
  init_slug_mismatch)
    printf 'Â∑≤Â≠òÂú®ÁöÑÈ°πÁõÆ %s ÊåáÂêë %sÔºàÂΩìÂâç‰ªìÂ∫ìÔºö%sÔºâÔºåÊìç‰ΩúÂ∑≤‰∏≠Ê≠¢' "$1" "$2" "$3"
    ;;
  init_created_project)
    printf '\033[94;1m%-11s\033[0m ‚Üí \033[32m%s\033[0m\n' 'config file' "$2"
    ;;
  init_done)
    printf 'wt init Â∑≤ÂÆåÊàê„ÄÇ\n'
    ;;
  lang_set_requires)
    printf 'wt lang set ÈúÄË¶Å‰∏Ä‰∏™ÂèÇÊï∞Ôºàen Êàñ zhÔºâ'
    ;;
  lang_unknown_command)
    printf 'Êú™Áü• wt lang ÂëΩ‰ª§Ôºö%s' "$1"
    ;;
  lang_prompt_select)
    printf 'ÈÄâÊã©ÁïåÈù¢ËØ≠Ë®ÄÔºö'
    ;;
  lang_option_en_label)
    printf 'Ëã±Êñá (English)'
    ;;
  lang_option_en_hint)
    printf 'English ÁïåÈù¢'
    ;;
  lang_option_zh_label)
    printf '‰∏≠Êñá'
    ;;
  lang_option_zh_hint)
    printf '‰∏≠ÊñáÁïåÈù¢'
    ;;
  lang_option_reset_label)
    printf 'ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº'
    ;;
  lang_option_reset_hint)
    printf 'ÊÅ¢Â§çËã±ÊñáÔºàÈªòËÆ§Ôºâ'
    ;;
  lang_set_success)
    printf 'ÁïåÈù¢ËØ≠Ë®ÄÂ∑≤ÂàáÊç¢‰∏∫%sÔºà%sÔºâ' "$1" "$2"
    ;;
  lang_reset_success)
    printf 'ÁïåÈù¢ËØ≠Ë®ÄÂ∑≤ÈáçÁΩÆ‰∏∫%sÔºà%sÔºâ' "$1" "$2"
    ;;
  lang_current)
    printf 'ÂΩìÂâçÁïåÈù¢ËØ≠Ë®ÄÔºö%sÔºà%sÔºâ' "$1" "$2"
    ;;
  theme_set_requires)
    printf 'theme set ÈúÄË¶Å <box|sage|archer>'
    ;;
  invalid_theme)
    printf 'Êú™Áü•‰∏ªÈ¢òÔºö%sÔºàÂèØÈÄâ box„ÄÅsage Êàñ archerÔºâ' "$1"
    ;;
  theme_set_success)
    printf 'ÂàóË°®‰∏ªÈ¢òÂ∑≤ÂàáÊç¢‰∏∫ %s' "$2"
    ;;
  theme_reset_success)
    printf 'ÂàóË°®‰∏ªÈ¢òÂ∑≤ÈáçÁΩÆ‰∏∫ %s' "$2"
    ;;
  theme_current)
    printf 'ÂΩìÂâçÂàóË°®‰∏ªÈ¢òÔºö%s' "$2"
    ;;
  theme_option_box_label)
    printf 'box'
    ;;
  theme_option_box_hint)
    printf 'wt list ‰ΩøÁî®ÊñπÊ°ÜÊ†áÈ¢ò'
    ;;
  theme_option_sage_label)
    printf 'sage'
    ;;
  theme_option_sage_hint)
    printf 'wt list ‰ΩøÁî®ÁÆÄÊ¥ÅÊ†áÈ¢òÔºàÂåÖÂê´Ë∑ØÂæÑÔºâ'
    ;;
  theme_option_archer_label)
    printf 'archer'
    ;;
  theme_option_archer_hint)
    printf 'wt list ‰ΩøÁî®ÁÆÄÊ¥ÅÊ†áÈ¢òÔºà‰∏çÊòæÁ§∫Ë∑ØÂæÑÔºâ'
    ;;
  theme_option_reset_label)
    printf 'ÈáçÁΩÆ‰∏∫ÈªòËÆ§ÂÄº'
    ;;
  theme_option_reset_hint)
    printf 'ÊÅ¢Â§çÊñπÊ°Ü‰∏ªÈ¢ò'
    ;;
  theme_prompt_select)
    printf 'ÈÄâÊã© wt list ËæìÂá∫ÁöÑ‰∏ªÈ¢òÔºö'
    ;;
  theme_selection_cancelled)
    printf 'Â∑≤ÂèñÊ∂à‰∏ªÈ¢òÈÄâÊã©'
    ;;
  theme_unknown_command)
    printf 'Êú™Áü•‰∏ªÈ¢òÂëΩ‰ª§Ôºö%s' "$1"
    ;;
  theme_usage)
    cat << 'THEME_USAGE_ZH'
wt theme - ÁÆ°ÁêÜ worktree.sh ÂàóË°®‰∏ªÈ¢ò

‰∫§‰∫íÂºè (TTY):
  wt theme                 ‰ΩøÁî®ÊñπÂêëÈîÆÈÄâÊã©‰∏ªÈ¢ò

Èùû‰∫§‰∫íÂºè:
  wt theme get             ËæìÂá∫ÂΩìÂâç‰∏ªÈ¢ò‰ª£Á†Å
  wt theme set <box|sage|archer>  ÂàáÊç¢‰∏ªÈ¢ò
  wt theme reset                 ÊÅ¢Â§çÈªòËÆ§‰∏ªÈ¢òÔºàboxÔºâ
  wt theme box|sage|archer       Á≠âÂêå‰∫é wt theme set
  wt theme help            ÊòæÁ§∫Êú¨Â∏ÆÂä©
THEME_USAGE_ZH
    ;;
  lang_usage)
    cat << 'LANG_USAGE_ZH'
wt lang - ÁÆ°ÁêÜ worktree.sh ÁïåÈù¢ËØ≠Ë®Ä

‰∫§‰∫íÂºè (TTY):
  wt lang                  ‰ΩøÁî®ÊñπÂêëÈîÆÈÄâÊã©ËØ≠Ë®Ä

Èùû‰∫§‰∫íÂºè:
  wt lang get              ËæìÂá∫ÂΩìÂâçËØ≠Ë®Ä‰ª£Á†Å
  wt lang set <en|zh>      ÂàáÊç¢ËØ≠Ë®Ä
  wt lang reset            ÊÅ¢Â§çÈªòËÆ§ËØ≠Ë®ÄÔºàËã±ÊñáÔºâ
  wt lang en|zh            Á≠âÂêå‰∫é wt lang set
  wt lang help             ÊòæÁ§∫Êú¨Â∏ÆÂä©
LANG_USAGE_ZH
    ;;
  init_prompt_repo_path)
    printf 'wt ËøΩË∏™ÁöÑ‰∏ª‰ªìÂ∫ìÂú∞ÂùÄ?'
    ;;
  init_prompt_copy_env)
    printf 'ÊòØÂê¶Ëá™Âä®Êã∑Ë¥ùÁéØÂ¢ÉÂèòÈáè?'
    ;;
  init_prompt_copy_env_files)
    printf 'Êã∑Ë¥ùÂì™‰∫õÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂?'
    ;;
  init_prompt_install_command)
    printf 'ÂÆâË£Ö‰æùËµñÁöÑÂëΩ‰ª§?'
    ;;
  init_prompt_install_custom)
    printf 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÂÆâË£ÖÂëΩ‰ª§Ôºö'
    ;;
  init_install_option_npm_ci_hint)
    printf '‰æùËµñ package-lock.json'
    ;;
  init_install_option_npm_install_hint)
    printf 'Êó†ÈúÄÈîÅÊñá‰ª∂ÔºåÈÄüÂ∫¶ËæÉÊÖ¢'
    ;;
  init_install_option_pnpm_install_hint)
    printf 'ÈúÄË¶Å pnpm-lock.yaml'
    ;;
  init_install_option_yarn_install_hint)
    printf 'ÈúÄË¶Å yarn.lock'
    ;;
  init_install_option_bun_install_hint)
    printf 'ÈúÄË¶Å Bun'
    ;;
  init_install_option_uv_sync_hint)
    printf 'ÈÄÇÁî®‰∫é uv ËôöÊãüÁéØÂ¢É'
    ;;
  init_install_option_poetry_install_hint)
    printf 'ÈÄÇÁî®‰∫é Poetry È°πÁõÆ'
    ;;
  init_install_option_pipenv_install_hint)
    printf 'ÈÄÇÁî®‰∫é Pipenv È°πÁõÆ'
    ;;
  init_install_option_pdm_install_hint)
    printf 'ÈÄÇÁî®‰∫é PDM È°πÁõÆ'
    ;;
  init_install_option_rye_install_hint)
    printf 'ÈÄÇÁî®‰∫é Rye È°πÁõÆ'
    ;;
  init_install_option_hatch_install_hint)
    printf 'ÈÄÇÁî®‰∫é Hatch È°πÁõÆ'
    ;;
  init_install_option_conda_hint)
    printf 'ÈÄÇÁî®‰∫éÊèê‰æõ Conda ÁéØÂ¢ÉÊñá‰ª∂ÁöÑ Python È°πÁõÆ'
    ;;
  init_install_option_pip_create_venv_hint)
    printf 'ÂàõÂª∫ËôöÊãüÁéØÂ¢ÉÂπ∂ÂÆâË£Ö‰æùËµñ'
    ;;
  init_install_option_pip_requirements_hint)
    printf 'pip install -r requirements.txt'
    ;;
  init_install_option_skip_label)
    printf '‰∏çËá™Âä®ÂÆâË£Ö'
    ;;
  init_install_option_skip_hint)
    printf 'Ë∑≥Ëøá‰æùËµñÂÆâË£ÖÊ≠•È™§'
    ;;
  init_install_option_custom_label)
    printf 'Ëá™ÂÆö‰πâÂëΩ‰ª§'
    ;;
  init_install_option_custom_hint)
    printf 'ËæìÂÖ•‰Ω†Ëá™Â∑±ÁöÑÂÆâË£ÖÂëΩ‰ª§'
    ;;
  init_install_option_detected_hint)
    printf 'Ê†πÊçÆ‰ªìÂ∫ìÁâπÂæÅËá™Âä®Ê£ÄÊµã'
    ;;
  init_install_option_existing_hint)
    printf 'Ê≤øÁî®ÂΩìÂâçÈÖçÁΩÆ'
    ;;
  init_prompt_serve_command)
    printf 'ÂêØÂä®ÂºÄÂèëÊúçÂä°ÁöÑÂëΩ‰ª§?'
    ;;
  init_prompt_serve_custom)
    printf 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÂêØÂä®ÂëΩ‰ª§Ôºö'
    ;;
  init_serve_option_npm_run_dev_hint)
    printf 'npm run devÔºàpackage.json scriptsÔºâ'
    ;;
  init_serve_option_pnpm_dev_hint)
    printf 'pnpm devÔºàpackage.json scriptsÔºâ'
    ;;
  init_serve_option_yarn_dev_hint)
    printf 'yarn devÔºàpackage.json scriptsÔºâ'
    ;;
  init_serve_option_bun_dev_hint)
    printf 'bun devÔºàpackage.json scriptsÔºâ'
    ;;
  init_serve_option_uv_run_hint)
    printf 'uv runÔºàPython ÂºÄÂèëÊúçÂä°Ôºâ'
    ;;
  init_serve_option_poetry_run_hint)
    printf 'poetry runÔºàËá™Âä®Â§ÑÁêÜËôöÊãüÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_pipenv_run_hint)
    printf 'pipenv runÔºàËá™Âä®Â§ÑÁêÜËôöÊãüÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_pdm_run_hint)
    printf 'pdm runÔºàËá™Âä®Â§ÑÁêÜËôöÊãüÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_rye_run_hint)
    printf 'rye runÔºàËá™Âä®Â§ÑÁêÜËôöÊãüÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_hatch_run_hint)
    printf 'hatch runÔºàËá™Âä®Â§ÑÁêÜËôöÊãüÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_conda_hint)
    printf 'conda runÔºà‰ΩøÁî® Conda ÁéØÂ¢ÉÔºâ'
    ;;
  init_serve_option_pip_venv_hint)
    printf '‰ΩøÁî®ËôöÊãüÁéØÂ¢É‰∏≠ÁöÑÂëΩ‰ª§'
    ;;
  init_serve_option_manage_runserver_hint)
    printf 'Django manage.py runserver'
    ;;
  init_serve_option_python_app_hint)
    printf 'python app.py'
    ;;
  init_serve_option_skip_label)
    printf '‰∏çËá™Âä®ÂêØÂä®'
    ;;
  init_serve_option_skip_hint)
    printf 'Ë∑≥ËøáËá™Âä®ÂêØÂä®ÂºÄÂèëÊúçÂä°'
    ;;
  init_serve_option_custom_label)
    printf 'Ëá™ÂÆö‰πâÂëΩ‰ª§'
    ;;
  init_serve_option_custom_hint)
    printf 'ËæìÂÖ•‰Ω†Ëá™Â∑±ÁöÑÂêØÂä®ÂëΩ‰ª§'
    ;;
  init_serve_option_detected_hint)
    printf 'Ê†πÊçÆ‰ªìÂ∫ìÁâπÂæÅËá™Âä®Ê£ÄÊµã'
    ;;
  init_serve_option_existing_hint)
    printf 'Ê≤øÁî®ÂΩìÂâçÈÖçÁΩÆ'
    ;;
  init_prompt_serve_logging_path)
    printf 'ÂºÄÂèëÊó•ÂøóËæìÂá∫ÁõÆÂΩï?ÔºàÁïôÁ©∫ÂàôÁ¶ÅÁî®Ôºâ'
    ;;
  init_prompt_branch_prefix)
    printf 'È¶ñÈÄâ worktree ÂàÜÊîØÂâçÁºÄ?'
    ;;
  init_prompt_branch_custom)
    printf 'ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÂàÜÊîØÂâçÁºÄÔºö'
    ;;
  init_branch_option_current_hint)
    printf 'Ê≤øÁî®ÂΩìÂâçÈÖçÁΩÆ'
    ;;
  init_branch_option_default_hint)
    printf 'ÈªòËÆ§ÂàÜÊîØÂâçÁºÄÔºàÊé®ËçêÔºâ'
    ;;
  init_branch_option_alternative_hint)
    printf 'Â∏∏ËßÅÂ§áÁî®ÂâçÁºÄ'
    ;;
  init_branch_option_skip_label)
    printf '‰øùÊåÅÁé∞Áä∂'
    ;;
  init_branch_option_skip_hint)
    printf '‰∏ç‰øÆÊîπÈªòËÆ§ÂâçÁºÄ'
    ;;
  init_branch_option_custom_label)
    printf 'Ëá™ÂÆö‰πâÂâçÁºÄ'
    ;;
  init_branch_option_custom_hint)
    printf 'ËæìÂÖ•‰Ω†Ëá™Â∑±ÁöÑÂàÜÊîØÂâçÁºÄ'
    ;;
  aborted)
    printf 'Â∑≤ÂèñÊ∂à'
    ;;
  removing_worktree)
    printf 'üóëÔ∏è  Âà†Èô§ worktree: %s' "$1"
    ;;
  removed_branch)
    printf 'üóÇÔ∏è  Â∑≤Âà†Èô§ÂàÜÊîØ %s' "$1"
    ;;
  worktree_removed)
    printf '‚úÖ Â∑≤ÁßªÈô§ worktree %s' "$1"
    ;;
  current_worktree_removed)
    printf 'üìÅ ÂΩìÂâç worktree Â∑≤ÁßªÈô§ÔºåÂàáÊç¢Âõû‰∏ªÁõÆÂΩï'
    ;;
  merge_requires_name)
    printf 'merge ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞Ôºà‰æãÂ¶Ç wt merge 123Ôºâ'
    ;;
  merge_invalid_target)
    printf 'Ëß£ÊûêÂæóÂà∞ %sÔºàworktree %sÔºâ‚Üí %sÔºà‰∏ªÂ∑•‰ΩúÂå∫ÔºâÔºõwt merge È¢ÑÊúüÁâπÊÄßÂàÜÊîØÔºåËØ∑Ê£ÄÊü• worktree ÂêçÁß∞ÊàñÂàÜÊîØÂâçÁºÄ„ÄÇ' "$1" "$2" "$3"
    ;;
  merge_base_dirty)
    printf '‰∏ª‰ªìÂ≠òÂú®Êú™Êèê‰∫§‰øÆÊîπÔºåÂêàÂπ∂ÂâçËØ∑Êèê‰∫§ÊàñÊöÇÂ≠ò'
    ;;
  merge_branch_not_found)
    printf 'Êú™ÊâæÂà∞ÁâπÊÄßÂàÜÊîØÔºö%s' "$1"
    ;;
  merge_feat_dirty)
    printf 'worktree %s Â≠òÂú®Êú™Êèê‰∫§‰øÆÊîπÔºåÂêàÂπ∂ÂâçËØ∑Êèê‰∫§ÊàñÊöÇÂ≠ò' "$1"
    ;;
  merge_no_commits)
    printf '%s Áõ∏ÂØπ‰∫é %s Ê≤°ÊúâÊñ∞ÁöÑÊèê‰∫§ÔºåÂ∑≤Ë∑≥ËøáÂêàÂπ∂' "$1" "$2"
    ;;
  merge_start)
    printf 'üîÄ Ê≠£Âú®Â∞Ü %s ÂêàÂπ∂Âà∞ %s' "$1" "$2"
    ;;
  merge_conflict_abort)
    printf '‚ö†Ô∏è ÂêàÂπ∂ÂÜ≤Á™ÅÔºåËØ∑ÊâãÂä®ÂêàÂπ∂ÂêéËá™Ë°å/‰ΩøÁî®LLMËß£ÂÜ≥ÂÜ≤Á™Å/‰ΩøÁî®LLMÁßªÊ§çÂèòÊõ¥„ÄÇ'
    ;;
  merge_done)
    printf '‚úÖ ÂêàÂπ∂ÂÆåÊàê: %s ‚Üí %s' "$1" "$2"
    ;;
  merge_cleanup_hint)
    printf 'üßπ Â¶ÇÈúÄÊ∏ÖÁêÜËØ∑ËøêË°åÔºöwt rm %s' "$1"
    ;;
  project_branch_required)
    printf '‰∏ª‰ªìÂΩìÂâçÂ§Ñ‰∫éÊ∏∏Á¶ª HEADÔºåËØ∑ÂÖàÂàáÊç¢Âà∞ÂÖ∑ÂêçÂàÜÊîØÂêéÈáçËØï'
    ;;
  project_directory_required)
    printf 'ËØ∑Âú® %s ÊàñÂÖ∂‰ªªÊÑèÂ≠êÁõÆÂΩïËøêË°åËØ•ÂëΩ‰ª§' "$1"
    ;;
  sync_requires_target)
    printf 'sync ÈúÄË¶Å‰º†ÂÖ• "all" ÊàñËá≥Â∞ë‰∏Ä‰∏™ worktree ÂêçÁß∞'
    ;;
  sync_invalid_all)
    printf 'sync ÁöÑ "all" ‰∏çËÉΩ‰∏éÂÖ∂‰ªñÂêçÁß∞ÂêåÊó∂‰ΩøÁî®'
    ;;
  sync_base_dirty)
    printf '‰∏ªÂ∑•‰ΩúÂå∫Â≠òÂú®Êú™ÊöÇÂ≠òÊàñÊú™ËøΩË∏™ÁöÑÊîπÂä®ÔºåËØ∑ÂÖàÊèê‰∫§ÊàñÊöÇÂ≠òÂêéÂÜçÂêåÊ≠•'
    ;;
  sync_skip_base)
    printf '‚öôÔ∏è  Ë∑≥Ëøá‰∏ªÂ∑•‰ΩúÂå∫Ôºà%sÔºâ' "$1"
    ;;
  sync_no_targets)
    printf 'Ê≤°ÊúâÂèØÂêåÊ≠•ÁöÑ worktree'
    ;;
  sync_no_staged)
    printf 'Ê≤°ÊúâÂèØÂêåÊ≠•ÁöÑÊöÇÂ≠òÊîπÂä®ÔºåËØ∑ÂÖàÊâßË°å git add'
    ;;
  sync_patch_failed)
    printf 'ÂáÜÂ§áÊöÇÂ≠òÂ∑ÆÂºÇÂ§±Ë¥•ÔºåÊó†Ê≥ïÂÆåÊàêÂêåÊ≠•'
    ;;
  sync_target_dirty)
    printf 'worktree %s ‰∏çÂπ≤ÂáÄÔºà%sÔºâÔºåËØ∑ÂÖàÊèê‰∫§ÊàñÊöÇÂ≠òÂêéÂÜçÂêåÊ≠•' "$1" "$2"
    ;;
  sync_apply_failed)
    printf '‚ö†Ô∏è  Âêë %s ÂêåÊ≠•ÊöÇÂ≠òÊîπÂä®Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§ÑÁêÜ' "$1"
    ;;
  sync_apply_start)
    printf 'üì§ Ê≠£Âú®Âêë %s ÂêåÊ≠•ÊöÇÂ≠òÊîπÂä®' "$1"
    ;;
  sync_apply_done)
    printf '‚úÖ Â∑≤ÂêåÊ≠• %s' "$1"
    ;;
  sync_done)
    printf '‚úÖ ÂêåÊ≠•ÂÆåÊàêÔºàÊõ¥Êñ∞‰∫Ü %s ‰∏™ worktreeÔºâ' "$1"
    ;;
  cleaning_worktree)
    printf 'üßπ Ê∏ÖÁêÜ worktree: %s' "$1"
    ;;
  cleaned_count)
    printf '‚úÖ Â∑≤Ê∏ÖÁêÜ %s ‰∏™ worktree' "$1"
    ;;
  cleaned_none)
    printf '‚úÖ Ê≤°ÊúâÁ¨¶ÂêàÊù°‰ª∂ÁöÑÊï∞Â≠ó worktree'
    ;;
  clean_switch_back)
    printf 'üìÅ ÂΩìÂâç worktree Â∑≤Ê∏ÖÁêÜÔºåÂàáÊç¢Âõû‰∏ªÁõÆÂΩï'
    ;;
  clean_confirm_prompt)
    printf 'ÊòØÂê¶Âà†Èô§È°πÁõÆ %s ÁöÑÊï∞Â≠ó worktree %sÔºà%sÔºâÔºü[Y/n]' "$2" "$1" "$3"
    ;;
  remove_confirm_prompt)
    printf 'Âà†Èô§ worktree %sÔºü[Y/n]' "$1"
    ;;
  remove_confirm_prompt_global)
    printf 'ÊòØÂê¶Âà†Èô§È°πÁõÆ %s ‰∏≠ÁöÑ %sÔºà%sÔºâÔºü[Y/n]' "$2" "$1" "$3"
    ;;
  remove_failed)
    printf 'Âà†Èô§ %s Â§±Ë¥•' "$1"
    ;;
  detach_prompt_worktree)
    printf 'ÁßªÈô§Â∑•‰ΩúÊ†ë %sÔºü[Y/n]' "$1"
    ;;
  detach_abort_user)
    printf 'Áî®Êà∑Â∑≤ÂèñÊ∂à detach Êìç‰Ωú'
    ;;
  detach_remove_failed)
    printf 'ÁßªÈô§ %s Â§±Ë¥•Ôºö%s' "$1" "$2"
    ;;
  detach_summary_removed)
    printf 'Â∑≤ÁßªÈô§ %s ‰∏™Â∑•‰ΩúÊ†ë' "$1"
    ;;
  detach_summary_failed)
    printf 'ÁßªÈô§Â§±Ë¥•Ôºö%sÔºà%sÔºâ' "$1" "$2"
    ;;
  detach_summary_skipped)
    printf 'Â∑≤Ë∑≥Ëøá %s ‰∏™Ââ©‰ΩôÂ∑•‰ΩúÊ†ë' "$1"
    ;;
  detach_prompt_project)
    printf 'Ëß£Èô§È°πÁõÆ %s ÁöÑÊ≥®ÂÜåÔºü[Y/n]' "$1"
    ;;
  detach_done)
    printf '‚úÖ Â∑≤Ëß£Èô§È°πÁõÆ %s ÁöÑÊ≥®ÂÜå' "$1"
    ;;
  detach_project_missing)
    printf 'Êú™ÊâæÂà∞È°πÁõÆ %sÔºåÊú™ÊâßË°å‰ªª‰ΩïÊìç‰Ωú' "$1"
    ;;
  detach_no_projects)
    printf 'ÂΩìÂâçÊ≤°ÊúâÂ∑≤Ê≥®ÂÜåÁöÑÈ°πÁõÆÔºåËØ∑ÂÖàËøêË°å wt init'
    ;;
  detach_unknown_option)
    printf 'detach ÁöÑÊú™Áü•ÂèÇÊï∞Ôºö%s' "$1"
    ;;
  config_set_requires)
    printf 'config set ÈúÄË¶Å <key> <value>'
    ;;
  temp_file_failed)
    printf 'Êó†Ê≥ïÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂'
    ;;
  config_unset_requires)
    printf 'config unset ÈúÄË¶Å <key>'
    ;;
  config_file_missing)
    printf 'Êú™ÊâæÂà∞ÈÖçÁΩÆÊñá‰ª∂: %s' "$1"
    ;;
  config_key_not_set)
    printf 'ÈÖçÁΩÆÈ°πÊú™ËÆæÁΩÆ: %s' "$1"
    ;;
  config_update_failed)
    printf 'Êõ¥Êñ∞ÈÖçÁΩÆÂ§±Ë¥•'
    ;;
  select_navigation_hint)
    printf 'Ôºà‰ΩøÁî® ‚Üë/‚Üì Êàñ j/k ÁßªÂä®ÔºåEnter Á°ÆËÆ§ÔºåCtrl+C ÂèñÊ∂àÔºõ‰πüÂèØÁõ¥Êé•ËæìÂÖ•Êï∞Â≠óË∑≥ËΩ¨„ÄÇÔºâ'
    ;;
  prompt_yes_label)
    printf 'Yes'
    ;;
  prompt_no_label)
    printf 'No'
    ;;
  prompt_choice_hint)
    printf '%s' '- ‰ΩøÁî®ÊñπÂêëÈîÆÈÄâÊã©ÔºåÂõûËΩ¶Á°ÆËÆ§ÔºåCtrl+C ÂèñÊ∂à„ÄÇ'
    ;;
  prompt_default_hint)
    printf 'ÈªòËÆ§ÂÄºÔºàÊåâÂõûËΩ¶‰øùÁïôÔºâÔºö%s' "$1"
    ;;
  prompt_empty_display)
    printf 'ÔºàÁïôÁ©∫Ôºâ'
    ;;
  select_project_prompt)
    printf 'ËØ∑ÈÄâÊã©È°πÁõÆÔºö'
    ;;
  select_project_option)
    if [ -n "${3:-}" ]; then
      printf '  [%d] %sÔºà%sÔºâ‚Äî %s' "$1" "$2" "$3" "$4"
    else
      printf '  [%d] %s ‚Äî %s' "$1" "$2" "$4"
    fi
    ;;
  select_project_input)
    printf 'ËæìÂÖ•ÁºñÂè∑ (1-%s)ÔºåÊàñÁõ¥Êé•ÂõûËΩ¶ÂèñÊ∂àÔºö' "$1"
    ;;
  select_project_invalid)
    printf 'ËØ∑ËæìÂÖ• 1-%s ‰πãÈó¥ÁöÑÊï∞Â≠ó„ÄÇ' "$1"
    ;;
  select_worktree_prompt)
    printf 'ËØ∑ÈÄâÊã©ÂåπÈÖçÁöÑ worktreeÔºö'
    ;;
  select_worktree_option)
    printf '  [%d] %sÔºàÈ°πÁõÆ %sÔºâ‚Äî %s' "$1" "$2" "$3" "$4"
    ;;
  select_worktree_input)
    printf 'ËæìÂÖ•ÁºñÂè∑ (1-%s)ÔºåÊàñÁõ¥Êé•ÂõûËΩ¶ÂèñÊ∂àÔºö' "$1"
    ;;
  select_worktree_invalid)
    printf 'ËØ∑ËæìÂÖ• 1-%s ‰πãÈó¥ÁöÑÊï∞Â≠ó„ÄÇ' "$1"
    ;;
  git_required)
    printf 'ÈúÄË¶ÅÂÆâË£Ö git'
    ;;
  project_not_found)
    printf 'Êú™ÊâæÂà∞È°πÁõÆÁõÆÂΩï: %s' "$1"
    ;;
  project_dir_unset)
    printf 'wt Â∞öÊú™ÂàùÂßãÂåñÔºåËØ∑Âú®‰ªìÂ∫ìÁõÆÂΩï‰∏ãËøêË°å wt init'
    ;;
  project_selection_cancelled)
    printf 'Â∑≤ÂèñÊ∂àÈ°πÁõÆÈÄâÊã©'
    ;;
  project_path_missing)
    printf 'È°πÁõÆ %s Áº∫Â∞ëÊúâÊïàÁöÑ repo.pathÔºåËØ∑Âú®ËØ•‰ªìÂ∫ìÂÜÖÈáçÊñ∞ÊâßË°å wt init' "$1"
    ;;
  git_command_failed)
    printf 'git ÂëΩ‰ª§Âú® %s ÊâßË°åÂ§±Ë¥•' "$1"
    ;;
  command_requires_project)
    printf 'ËØ•ÂëΩ‰ª§ÈúÄË¶ÅÂú®Â∑≤ÂàùÂßãÂåñÁöÑÈ°πÁõÆÁõÆÂΩï‰∏≠ÊâßË°å'
    ;;
  list_no_args)
    printf 'list ‰∏çÊé•ÂèóÂèÇÊï∞'
    ;;
  list_global_project_header)
    printf 'üìÅ %s' "$1"
    ;;
  list_global_worktree_entry)
    local marker="$1"
    local name="$2"
    local branch="$3"
    local hash="$4"
    local path="$5"
    printf '  %s %-13s %-18s %-8s  %s' "$marker" "$name" "$branch" "$hash" "$path"
    ;;
  main_no_args)
    printf 'main ‰∏çÊé•ÂèóÂèÇÊï∞'
    ;;
  no_projects_configured)
    printf 'Â∞öÊú™ÈÖçÁΩÆ‰ªª‰ΩïÈ°πÁõÆÔºåËØ∑ÂÖàÂú®ÁõÆÊ†á‰ªìÂ∫ìÊâßË°å wt init'
    ;;
  path_requires_name)
    printf 'path ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞'
    ;;
  worktree_not_found)
    printf 'Êú™ÊâæÂà∞ worktree: %s' "$1"
    ;;
  add_requires_name)
    printf 'add ÈúÄË¶ÅÊåáÂÆö worktree ÂêçÁß∞'
    ;;
  add_unknown_option)
    printf 'add ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
    ;;
  unexpected_extra_argument)
    printf 'Âá∫Áé∞Êú™È¢ÑÊúüÁöÑÈ¢ùÂ§ñÂèÇÊï∞: %s' "$1"
    ;;
  invalid_worktree_name)
    printf 'ÈùûÊ≥ïÁöÑ worktree ÂêçÁß∞Ôºö%sÔºàÁ¶ÅÊ≠¢ÂåÖÂê´ /„ÄÅ\\„ÄÅ~„ÄÅË∑ØÂæÑÁÇπÊÆµÊàñÁ©∫ÁôΩÔºâ' "$1"
    ;;
  port_requires_numeric)
    printf 'port ÈúÄË¶Å 1024-65535 ‰πãÈó¥ÁöÑÊï∞ÂÄº'
    ;;
  worktree_exists)
    printf 'worktree Ë∑ØÂæÑÂ∑≤Â≠òÂú®: %s' "$1"
    ;;
  config_list_no_args)
    printf 'config list ‰∏çÊé•ÂèóÈ¢ùÂ§ñÂèÇÊï∞'
    ;;
  config_list_empty)
    printf 'Êú™ÊâæÂà∞Â∑≤‰øùÂ≠òÁöÑÈÖçÁΩÆÔºö%sÔºà‰ΩøÁî®ÈªòËÆ§ÂÄºÔºâ„ÄÇ' "$1"
    ;;
  config_get_requires_key)
    printf 'config get ÈúÄË¶ÅÊèê‰æõ key'
    ;;
  config_get_requires_exactly_one)
    printf 'config get ÈúÄË¶Å‰∏î‰ªÖÈúÄË¶Å‰∏Ä‰∏™ key'
    ;;
  config_key_not_found)
    printf 'Êú™ÊâæÂà∞ÈÖçÁΩÆÈ°π: %s' "$1"
    ;;
  config_unset_requires_key)
    printf 'config unset ÈúÄË¶ÅÊèê‰æõ key'
    ;;
  config_unset_requires_exactly_one)
    printf 'config unset ÈúÄË¶Å‰∏î‰ªÖÈúÄË¶Å‰∏Ä‰∏™ key'
    ;;
  config_unknown_option)
    printf 'Êú™Áü•ÁöÑ config ÈÄâÈ°π: %s' "$1"
    ;;
  config_expect_key_or_value)
    printf 'config ÈúÄË¶Å <key> Êàñ <key> <value>'
    ;;
  shell_hook_requires_shell)
    printf 'shell-hook ÈúÄË¶ÅÊåáÂÆö shellÔºàbash Êàñ zshÔºâ'
    ;;
  shell_hook_unsupported_shell)
    printf 'shell-hook ‰∏çÊîØÊåÅÁöÑ shell: %sÔºà‰ªÖÊîØÊåÅ bash„ÄÅzshÔºâ' "$1"
    ;;
  branch_requires_value)
    printf 'branch ÈúÄË¶ÅÊåáÂÆöÂÄº'
    ;;
  init_unknown_option)
    printf 'init ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
    ;;
  init_no_positional)
    printf 'init ‰∏çÊé•Âèó‰ΩçÁΩÆÂèÇÊï∞'
    ;;
  init_forbid_home)
    printf 'Á¶ÅÊ≠¢Âú®ÂÆ∂ÁõÆÂΩïËøêË°å wt initÔºà%sÔºâ' "$1"
    ;;
  init_run_inside_git)
    printf 'ËØ∑Âú® git ‰ªìÂ∫ì‰∏≠ËøêË°å wt init'
    ;;
  remove_unknown_option)
    printf 'remove ÁöÑÊú™Áü•ÈÄâÈ°π: %s' "$1"
    ;;
  remove_accepts_at_most_one)
    printf 'remove ÊúÄÂ§öÂè™Êé•Âèó‰∏Ä‰∏™ worktree ÂêçÁß∞'
    ;;
  cannot_remove_main)
    printf '‰∏çËÉΩÁßªÈô§‰∏ª worktree'
    ;;
  specify_worktree_or_inside)
    printf 'ÊåáÂÆö worktree ÂêçÁß∞ÊàñÂú® worktree ÁõÆÂΩï‰∏≠ËøêË°å'
    ;;
  clean_no_args)
    printf 'clean ‰∏çÊé•ÂèóÂèÇÊï∞'
    ;;
  invalid_language)
    printf '‰∏çÊîØÊåÅÁöÑËØ≠Ë®Ä: %sÔºàÊîØÊåÅ en„ÄÅzhÔºâ' "$1"
    ;;
  uninstall_auto_detected_shell)
    printf 'Ëá™Âä®Ê£ÄÊµãÂà∞ shell: %s' "$1"
    ;;
  uninstall_requires_shell_value)
    printf '--shell ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
    ;;
  uninstall_requires_prefix_value)
    printf '--prefix ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
    ;;
  uninstall_invalid_shell)
    printf 'Êó†ÊïàÁöÑ shell Á±ªÂûã: %sÔºàÂèØÈÄâ zsh„ÄÅbash Êàñ noneÔºâ' "$1"
    ;;
  uninstall_unknown_option)
    printf 'uninstall Êú™Áü•ÈÄâÈ°π: %s' "$1"
    ;;
  uninstall_no_positional)
    printf 'uninstall ‰∏çÊé•ÂèóÈ¢ùÂ§ñ‰ΩçÁΩÆÂèÇÊï∞'
    ;;
  uninstall_removed_binary)
    printf 'Â∑≤‰ªé %s Âà†Èô§ wt' "$1"
    ;;
  uninstall_binary_missing)
    printf 'Âú® %s Êú™ÊâæÂà∞ wtÔºàÂèØËÉΩÂ∑≤Âà†Èô§Ôºâ' "$1"
    ;;
  uninstall_removed_messages)
    printf 'Â∑≤‰ªé %s Âà†Èô§ wt Ê∂àÊÅØÊñá‰ª∂' "$1"
    ;;
  uninstall_shell_config_missing)
    printf 'Êú™ÊâæÂà∞ shell ÈÖçÁΩÆÊñá‰ª∂ %sÔºåË∑≥Ëøá„ÄÇ' "$1"
    ;;
  uninstall_shell_hook_missing)
    printf 'Êú™Âú® %s ÊâæÂà∞ wt shell hookÔºåË∑≥Ëøá„ÄÇ' "$1"
    ;;
  uninstall_backup_created)
    printf 'Â∑≤ÂàõÂª∫Â§á‰ªΩ: %s.backup.%s' "$1" "$2"
    ;;
  uninstall_shell_hook_removed)
    printf 'Â∑≤‰ªé %s ÁßªÈô§ wt shell hook' "$1"
    ;;
  uninstall_unknown_shell_type)
    printf 'Ë≠¶Âëä: Êú™Áü• shell Á±ªÂûã %sÔºåË∑≥Ëøá shell Ê∏ÖÁêÜ' "$1"
    ;;
  uninstall_skip_shell_cleanup)
    printf 'Ë∑≥Ëøá shell ÈÖçÁΩÆÊ∏ÖÁêÜÔºà‰ΩøÁî® --shell zsh Êàñ --shell bash ÂèØÊâßË°åÊ∏ÖÁêÜÔºâ'
    ;;
  uninstall_complete)
    printf 'Âç∏ËΩΩÂÆåÊàê„ÄÇ'
    ;;
  uninstall_config_backup_created)
    printf 'Â∑≤Â∞Ü wt ÈÖçÁΩÆ‰ªé %s Â§á‰ªΩÂà∞ %s' "$1" "$2"
    ;;
  uninstall_worktrees_preserved)
    printf 'Ê≥®ÊÑè: Â∑≤ÂàõÂª∫ÁöÑ worktree ‰∏ç‰ºöÂà†Èô§'
    ;;
  reinstall_unknown_option)
    printf 'reinstall Êú™Áü•ÈÄâÈ°π: %s' "$1"
    ;;
  reinstall_no_positional)
    printf 'reinstall ‰∏çÊé•Âèó‰ΩçÁΩÆÂèÇÊï∞'
    ;;
  reinstall_requires_shell_value)
    printf '--shell ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
    ;;
  reinstall_requires_prefix_value)
    printf '--prefix ÈúÄË¶Å‰∏Ä‰∏™ÂÄº'
    ;;
  reinstall_script_missing)
    printf 'Êú™ÊâæÂà∞ÊâÄÈúÄËÑöÊú¨: %s' "$1"
    ;;
  reinstall_curl_required)
    printf '‰∏ãËΩΩÈáçÊñ∞ÂÆâË£ÖËÑöÊú¨ÈúÄË¶Å curl'
    ;;
  reinstall_fetch_remote_uninstall)
    printf 'Ê≠£Âú®‰ªé %s ‰∏ãËΩΩ uninstall.sh' "$1"
    ;;
  reinstall_fetch_remote_install)
    printf 'Ê≠£Âú®‰ªé %s ‰∏ãËΩΩ install.sh' "$1"
    ;;
  reinstall_fetch_failed)
    printf 'Êó†Ê≥ï‰∏ãËΩΩ %s' "$1"
    ;;
  reinstall_running)
    printf 'Ê≠£Âú®ÊâßË°å %s' "$1"
    ;;
  reinstall_uninstall_failed)
    printf 'uninstall.sh ÊâßË°åÂ§±Ë¥•: %s' "$1"
    ;;
  reinstall_install_failed)
    printf 'install.sh ÊâßË°åÂ§±Ë¥•: %s' "$1"
    ;;
  reinstall_complete)
    printf '‚úÖ ÈáçÊñ∞ÂÆâË£ÖÂÆåÊàê„ÄÇÂ¶ÇÂú®ÂÖ∂ÂÆÉÁªàÁ´ØËøêË°å wtÔºåËØ∑ÈáçÂêØÁªàÁ´Ø„ÄÇ'
    ;;
  *)
    printf '%s' "$key"
    ;;
  esac
}
